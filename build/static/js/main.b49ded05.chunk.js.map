{"version":3,"sources":["client/src/components/DataProvider.tsx","client/src/components/Layout.tsx","src/util.ts","src/block.ts","src/transaction.ts","client/src/components/Transaction.tsx","client/src/components/Block.tsx","client/src/components/BlockList.tsx","client/src/components/Wallet.tsx","client/src/components/MyWallet.tsx","client/src/App.tsx","client/src/index.tsx"],"names":["DataContext","createContext","DataProvider","children","useState","chain","setChain","fetchChain","useCallback","fetch","mode","credentials","then","response","json","data","catch","err","console","error","useEffect","setInterval","Provider","value","useStyles","makeStyles","theme","root","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","spacing","breakpoints","up","appBarSpacer","content","height","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","Layout","classes","React","open","setOpen","history","useHistory","className","CssBaseline","AppBar","clsx","Toolbar","IconButton","edge","color","aria-label","onClick","Typography","component","variant","noWrap","Drawer","Divider","List","ListItem","button","push","ListItemIcon","ListItemText","primary","Container","maxWidth","Grid","crypto","require","getHash","hash","createHash","update","digest","calculateBlockHash","block","previousHash","timestamp","nonce","JSON","stringify","getHashBase","updateHash","ecdsa","unspentTransactionsOfAddress","unconfirmedTransactions","address","length","Date","now","reduce","unspentTransactions","newUnspentOutputs","acc","transaction","concat","outputs","map","output","index","transactionId","id","amount","createUnspentTransactionOutputs","allInputsOnThisBlock","inputs","filter","unspentTransaction","find","input","transactionOutputIndex","calculateUnspentOutputs","getSenderAddress","sampleInput","outputTransactionBlock","outputTransaction","fontSize","shortAddress","substr","TransactionComponent","sender","useContext","senderDisplay","to","Card","CardContent","i","message","BlockComponent","gutterBottom","toLocaleString","Accordion","AccordionSummary","expandIcon","aria-controls","AccordionDetails","item","xs","BlockList","reversedChain","useMemo","reverse","lg","wordBreak","Wallet","useParams","balance","balanceOfAddress","transactions","log","getTransactionsOfAddress","Paper","Table","size","TableHead","TableRow","TableCell","align","TableBody","isCoinbase","Number","isInteger","o","a","senderAddress","isOutgoing","relevantOutput","otherAddress","otherAddressDisplay","MyWallet","localStorage","getItem","publicKey","setPublicKey","secret","setSecret","setItem","TextField","label","onChange","event","target","margin","App","path","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b49ded05.chunk.js","sourcesContent":["import React, { createContext, useCallback, useEffect, useState } from \"react\";\r\nimport { Chain } from \"../../../src/block\";\r\nimport { Transaction } from \"../../../src/transaction\";\r\n\r\nconst DataContext = createContext<Chain<Transaction[]>>([]);\r\n\r\nexport default function DataProvider({ children }: { children: React.ReactElement}): React.ReactElement {\r\n\r\n  const [chain, setChain] = useState([]);\r\n\r\n  const fetchChain = useCallback(() => {\r\n    fetch('http://hyggecoin.herokuapp.com/chain', {\r\n      mode: 'cors',\r\n      credentials: 'omit'\r\n    })\r\n      .then(response => response.json())\r\n      .then(response => setChain(response.data))\r\n      .catch(err => console.error(err));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchChain()\r\n    setInterval(fetchChain, 20 * 1000);\r\n  }, [fetchChain]);\r\n\r\n  return (\r\n    <DataContext.Provider value={chain}>\r\n      {children}\r\n    </DataContext.Provider>\r\n  );\r\n}\r\n\r\nexport {\r\n  DataContext\r\n};","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport WalletIcon from '@material-ui/icons/AccountBalanceWallet';\r\nimport MemoryIcon from '@material-ui/icons/Memory';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default function Layout({ children }: { children: React.ReactElement }) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n            Hyggecoin\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          <div>\r\n            <ListItem button onClick={() => history.push(\"/chain-explorer\")}>\r\n              <ListItemIcon>\r\n                <DashboardIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Chain Explorer\" />\r\n            </ListItem>\r\n            <ListItem button onClick={() => history.push(\"/wallet\")}>\r\n              <ListItemIcon>\r\n                <WalletIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Wallet\" />\r\n            </ListItem>\r\n            <ListItem button onClick={() => history.push(\"/mine\")}>\r\n              <ListItemIcon>\r\n                <MemoryIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Mine Coins\" />\r\n            </ListItem>\r\n          </div>\r\n        </List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            {children}\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}","const crypto = require('crypto');\r\n\r\nexport function getHash(content: string): string {\r\n  const hash = crypto.createHash('sha256');\r\n  hash.update(content);\r\n  return hash.digest('hex');\r\n}\r\n\r\nexport function toHexString(byteArray: any[]): string {\r\n  return Array.from(byteArray, (byte: any) => {\r\n      return ('0' + (byte & 0xFF).toString(16)).slice(-2);\r\n  }).join('');\r\n};\r\n\r\n/**\r\n * Split an array into arrays of a fixed length\r\n * Leftover items are included in the last array of fewer than the given length items\r\n */\r\nexport function chunk<T>(arr: T[], chunkLength: number): T[][] {\r\n  function getNextChunk(remainingArray: T[], collectedArrays: T[][]): T[][] {\r\n    if (remainingArray.length < chunkLength) {\r\n      return [...collectedArrays, remainingArray]\r\n    }\r\n    return getNextChunk(remainingArray.slice(chunkLength), [...collectedArrays, remainingArray.slice(0, chunkLength)]);\r\n  }\r\n  return getNextChunk(arr, []);\r\n}\r\n\r\n/**\r\n * The average of the difference between items in an array\r\n */\r\nexport function averageDifference(arr: number[]): number {\r\n  return (arr[arr.length - 1] - arr[0]) / (arr.length - 1);\r\n}","import { averageDifference, chunk, getHash } from \"./util\";\r\n\r\n/**\r\n * A single block in a blockchain\r\n */\r\nexport type Block<T> = {\r\n  /**\r\n   * Reference to the previous block. Since the blockchain is basically a linked list, this is how we know they string together.\r\n   * Also included in the current block's hash, so that the chain can't be altered without altering all the rest of it\r\n   */\r\n  previousHash: string;\r\n  /**\r\n   * Computed from the data, timestamp, previous block's hash and nonce. Any of those change, and the hash changes.\r\n   */\r\n  hash: string;\r\n  /**\r\n   * Time of block creation\r\n   */\r\n  timestamp: number;\r\n  /**\r\n   * Arbitrary data. In a cryptocurrency, this will hold the transactions encoded in the block\r\n   */\r\n  data: T;\r\n  /**\r\n   * A random number included at the end of the content for hash calculation, that resulted in the block passing the difficulty test\r\n   */\r\n  nonce: number\r\n}\r\n\r\n/**\r\n * A linked list of blocks\r\n */\r\nexport type Chain<T> = Block<T>[];\r\n\r\n/**\r\n * Get the string from a block the hash is calculated from\r\n */\r\nexport function getHashBase<T>({\r\n  previousHash,\r\n  timestamp,\r\n  data,\r\n  nonce\r\n}: Block<T>): string {\r\n  return previousHash + timestamp + JSON.stringify(data) + nonce;\r\n}\r\n\r\n/**\r\n * Calculate a block's hash based on all its other information, ensuring that you can't change the contents of the block without the hash changing\r\n * Uses sha256\r\n */\r\nexport function calculateBlockHash<T>(block: Block<T>): string {\r\n  return getHash(getHashBase(block));\r\n}\r\n\r\n/**\r\n * Update a block with its calculated hash and return the resulting block.\r\n * When you create a block, you should leave the hash empty and call this function.\r\n */\r\nexport function updateHash<T>(block: Block<T>): Block<T> {\r\n  return { ...block, hash: calculateBlockHash(block) };\r\n}\r\n\r\n/**\r\n * Update the block with a new once and corresponding hash, and return the resulting block\r\n */\r\nexport function nextNonce<T>(block: Block<T>): Block<T> {\r\n  return updateHash({ ...block, nonce: block.nonce + 1 })\r\n}\r\n\r\n/**\r\n * Check whether a sha256 hash matches a given difficulty, meaning whether it starts with difficulty number of 0s\r\n */\r\nexport function checkDifficulty(difficulty: number, hash: string): boolean {\r\n  return hash.substr(0, difficulty) === \"0\".repeat(difficulty)\r\n}\r\n\r\n/**\r\n * Change the nonce property of a block until the resulting hash passes the given difficulty\r\n */\r\nexport function mineBlock<T>(difficulty: number, block: Block<T>) {\r\n  let finishedBlock = block;\r\n  while (!checkDifficulty(difficulty, finishedBlock.hash)) {\r\n    finishedBlock = nextNonce(finishedBlock);\r\n    console.log(finishedBlock.nonce, finishedBlock.hash);\r\n  }\r\n  return finishedBlock;\r\n}\r\n\r\n/**\r\n * Helper for creating a block with a calculated hash\r\n */\r\nexport function createBlock<T>(data: T, previousHash: string): Block<T> {\r\n  return updateHash({\r\n    timestamp: Date.now(),\r\n    data,\r\n    previousHash,\r\n    hash: '',\r\n    nonce: 0\r\n  });\r\n}\r\n\r\n/**\r\n * Validates a chain, ensuring that all blocks' hash are correct and they chain together\r\n */\r\nexport function validateChain<T>(chain: Chain<T>) {\r\n  return chain.map((block, i) => {\r\n    // Genesis block is always valid\r\n    if (i === 0) {\r\n      return true;\r\n    }\r\n    // Validate the block\r\n    return (\r\n      block.hash === calculateBlockHash(block) && // block hash checks out\r\n      block.previousHash === chain[i -1].hash // previousHash is the save as previous block's hash\r\n    );\r\n  }).filter(isValid => !isValid).length === 0;\r\n}\r\n\r\n/**\r\n * The number of blocks after which we recheck the difficulty\r\n */\r\nexport const DIFFICULTY_CHECK_INTERVAL = 10;\r\n\r\nexport const MINUTE = 1000 * 60;\r\nexport const HOUR = 60 * MINUTE;\r\n\r\n/**\r\n * Expected time for a block to be mined\r\n */\r\nexport const DIFFICULTY_EXPECTED_MINING_TIME = 20 * MINUTE;\r\n\r\n/**\r\n * If the average mining time was lower or larger by this amount than the expected, don't update the difficulty\r\n */\r\nexport const DIFFICULTY_ALLOWED_DIFFERENCE_MULTIPLIER = 0.2;\r\n\r\n/**\r\n * The starting difficulty for an empty chain\r\n */\r\nexport const DIFFICULTY_STARTING = 4;\r\n\r\nexport const DIFFICULTY_MIN = 2;\r\nexport const DIFFICULTY_MAX = 10;\r\n\r\n/**\r\n * Gets required difficulty at the end of a given timestamp array. For testability purposes\r\n */\r\nexport function getDifficultyForNextBlockFromTimestamps(timestamps: number[]): number {\r\n  // Split the array into equal length chunks\r\n  const chunks = chunk(timestamps, DIFFICULTY_CHECK_INTERVAL);\r\n  return chunks.reduce<number>((difficulty, currentChunk) => {\r\n    // Only change difficulty for full chunks - ignore the last, incomplete chunk\r\n    if (currentChunk.length < DIFFICULTY_CHECK_INTERVAL) {\r\n      return difficulty;\r\n    }\r\n    // Calculate averate mining time\r\n    const averageMiningTime = averageDifference(currentChunk);\r\n    if (averageMiningTime > DIFFICULTY_EXPECTED_MINING_TIME * (1 + DIFFICULTY_ALLOWED_DIFFERENCE_MULTIPLIER)) {\r\n      return Math.min(difficulty + 1, DIFFICULTY_MAX);\r\n    }\r\n\r\n    if (averageMiningTime < DIFFICULTY_EXPECTED_MINING_TIME * (1 - DIFFICULTY_ALLOWED_DIFFERENCE_MULTIPLIER)) {\r\n      return Math.max(difficulty - 1, DIFFICULTY_MIN);\r\n    }\r\n\r\n    return difficulty;\r\n  }, DIFFICULTY_STARTING);\r\n}\r\n\r\n/**\r\n * Gets the required difficulty at the end of a given chain\r\n */\r\nexport function getDifficultyForNextBlock<T>(chain: Block<T>[]): number {\r\n  return getDifficultyForNextBlockFromTimestamps(chain.map(block => block.timestamp));\r\n}","import { getHash, toHexString } from \"./util\";\r\nimport * as ecdsa from 'elliptic';\r\nimport { Chain, createBlock } from \"./block\";\r\n\r\nconst ec = new ecdsa.ec('secp256k1');\r\n\r\n/**\r\n * Amount of coins rewarded for the miner of the block\r\n */\r\nexport const REWARD_AMOUNT = 10;\r\n\r\n/**\r\n * Max characters length of the transaction message\r\n */\r\nexport const TRANSACTION_MESSAGE_MAX_LENGTH = 130;\r\n\r\nexport type TransactionOutput = {\r\n  /**\r\n   * This is the public key of the user the number of coins are sent to\r\n   */\r\n  address: string;\r\n  /**\r\n   * Number of coins to send\r\n   */\r\n  amount: number;\r\n}\r\n\r\n/**\r\n * This is a utility type to hold information needed when handling unspent transaction outputs. Otherwise the entire transaction would need to be passed around.\r\n */\r\nexport type UnspentTransactionOutput = {\r\n  /**\r\n   * Id of the transaction this output belongs to\r\n   */\r\n  transactionId: string;\r\n  /**\r\n   * Index of the output inside the transaction outputs. Needed because one transaction can have multiple outputs, and we need to find the corresponding output when we verify\r\n   */\r\n  index: number;\r\n  /**\r\n   * Public key of recipient. Copied from the output directly.\r\n   */\r\n  address: string;\r\n  /**\r\n   * Amount of coins sent. Copied from the output directly.\r\n   */\r\n  amount: number;\r\n}\r\n\r\nexport type TransactionInput = {\r\n\r\n  /**\r\n   * The sender must sign this input with their private key\r\n   * Q: why is not the whole transaction signed instead of the individual inputs, since we use the transaction id as the content for the signature anyway?\r\n   */\r\n  signature: string;\r\n  /**\r\n   * The id of the transaction that holds the unspent output this input is referencing.\r\n   */\r\n  transactionId: string;\r\n  /**\r\n   * Since one transaction can have a number of outputs, we need to know the index of the output inside that transaction this input is referencing\r\n   */\r\n  transactionOutputIndex: number;\r\n}\r\n\r\nexport type Transaction = {\r\n  /**\r\n   * Derived from all other fields of the transaction, excluding signatures. When the data changes, the id should change.\r\n   */\r\n  id: string;\r\n  /**\r\n   * References to unspent outputs belonging to the user\r\n   */\r\n  inputs: TransactionInput[];\r\n  /**\r\n   * All outputs must add up to the total value of all inputs. If there is some leftover, an output should be added that sends the leftover back to the sender.\r\n   */\r\n  outputs: TransactionOutput[];\r\n  /**\r\n   * Optional message to be included with the transaction\r\n   */\r\n  message: string;\r\n}\r\n\r\n/**\r\n * Generate a has from the transaction's inputs and outputs to use as the id of the transaction\r\n */\r\nexport function generateTransactionID(transaction: Transaction): string {\r\n  const content = transaction.inputs.map(input => input.transactionId + input.transactionOutputIndex).join('') +\r\n    transaction.outputs.map(output => output.address + output.amount).join('') +\r\n    (transaction.message || '');\r\n  return getHash(content);\r\n}\r\n\r\n/**\r\n * Using your private key, sign a transaction's inputs\r\n */\r\nexport function signTransactionInputs(transaction: Transaction, secretKey: string): Transaction {\r\n  const key = ec.keyFromPrivate(secretKey, 'hex');\r\n  return ({\r\n    ...transaction,\r\n    inputs: transaction.inputs.map(input => {\r\n      return {\r\n        ...input,\r\n        signature: toHexString(key.sign(transaction.id).toDER())\r\n      };\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * Using your private key, sign a transaction's inputs and generate its id\r\n */\r\nexport function signTransaction(transaction: Transaction, secretKey: string): Transaction {\r\n  return signTransactionInputs({\r\n    ...transaction,\r\n    id: generateTransactionID(transaction)\r\n  }, secretKey);\r\n}\r\n\r\n/**\r\n * Helper for creating a transaction with calculated id, and signed\r\n */\r\nexport function createTransaction(inputs: TransactionInput[], outputs: TransactionOutput[], message: string, secretKey: string): Transaction {\r\n  let transaction = {\r\n    id: '',\r\n    inputs,\r\n    message,\r\n    outputs\r\n  };\r\n  transaction = {\r\n    ...transaction,\r\n    id: generateTransactionID(transaction)\r\n  };\r\n  return signTransactionInputs(transaction, secretKey);\r\n}\r\n\r\n/**\r\n * Helper for creating a coinbase transaction\r\n */\r\nexport function createCoinbaseTransaction(blockHeight: number, publicKey: string, secretKey: string): Transaction {\r\n  return createTransaction([{\r\n    signature: '',\r\n    transactionId: '',\r\n    transactionOutputIndex: blockHeight\r\n  }], [{\r\n    address: publicKey,\r\n    amount: blockHeight === 1 ? 500 : REWARD_AMOUNT\r\n  }], 'Coinbase transaction', secretKey);\r\n}\r\n\r\n/**\r\n * Validate transaction outputs\r\n */\r\nexport function validateOutput(output: TransactionOutput): Error | null {\r\n\r\n  // Validate output address\r\n  if (typeof output.address !== 'string') {\r\n    throw new Error('Output address needs to be a valid address');\r\n  }\r\n\r\n  // Validate that no outputs are for 0 amount\r\n  if (output.amount === 0) {\r\n    throw new Error('Can\\'t create output for 0');\r\n  }\r\n\r\n  // Validate that no outputs are for negative amount\r\n  if (output.amount < 0) {\r\n    throw new Error('Can\\'t create output for negative amount');\r\n  }\r\n\r\n  // Validate that no outputs are for more than javascript's safe integer\r\n  if (output.amount > Number.MAX_SAFE_INTEGER) {\r\n    throw new Error(`Can\\'t create output for more than ${Number.MAX_SAFE_INTEGER}`);\r\n  }\r\n\r\n  // Validate that no fraction outputs have a greater precision than allowed\r\n  if (!Number.isInteger(output.amount)) {\r\n    throw new Error(`Only whole coins can be sent`);\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/**\r\n * Determines whether a transaction is valid or not, checking id and that the inputs are valid, and that inputs equal outputs\r\n */\r\nexport function validateTransaction(transaction: Transaction, myUnspentTransactionOutputs: UnspentTransactionOutput[], unconfirmedTransactions: Transaction[]): boolean {\r\n  // Validate id\r\n  if (generateTransactionID(transaction) !== transaction.id) {\r\n    throw new Error('Transaction ID incorrect');\r\n  }\r\n\r\n  // Validate that the transaction doesn't reference an input that has already been referenced by another unconfirmed transaction\r\n  const allExistingInputs = unconfirmedTransactions.reduce<TransactionInput[]>((arr, transaction) => [...arr, ...transaction.inputs], []);\r\n  const referencesLockedTransaction = transaction.inputs.find(newInput => allExistingInputs.find(existingInput => existingInput.transactionId === newInput.transactionId && existingInput.transactionOutputIndex == newInput.transactionOutputIndex));\r\n  if (referencesLockedTransaction) {\r\n    throw new Error('Transaction references an output already used by another unconfirmed transaction');\r\n  }\r\n\r\n  // Validate that all inputs are unspent and belong to the user\r\n  const allInputsValid = transaction.inputs.map(input => {\r\n    const referencedOutput = myUnspentTransactionOutputs.find(unspentOutput => unspentOutput.transactionId === input.transactionId && unspentOutput.index === input.transactionOutputIndex);\r\n    if (!referencedOutput) {\r\n      console.error('Referenced output doesn\\'t exist');\r\n      return false;\r\n    }\r\n    const address = referencedOutput.address;\r\n    const key = ec.keyFromPublic(address, 'hex');\r\n    return key.verify(transaction.id, input.signature);\r\n  }).filter(Boolean).length === transaction.inputs.length;\r\n\r\n  if (!allInputsValid) {\r\n    throw new Error('Not all inputs are valid for transaction.')\r\n  }\r\n\r\n  // Check that all inputs equal outputs\r\n  const inputValue = transaction.inputs.reduce((acc, input) => {\r\n    const referencedOutput = myUnspentTransactionOutputs.find(unspentOutput => unspentOutput.transactionId === input.transactionId && unspentOutput.index === input.transactionOutputIndex);\r\n    if (!referencedOutput) {\r\n      return 0;\r\n    }\r\n    return acc + referencedOutput.amount;\r\n  }, 0);\r\n  const outputValue = transaction.outputs.reduce((acc, output) => acc + output.amount, 0);\r\n  if (inputValue !== outputValue) {\r\n    throw new Error('Input and output values do not match in transaction.');\r\n  }\r\n\r\n  // Validate outputs\r\n  transaction.outputs.forEach(output => validateOutput(output));\r\n\r\n  // Validate that the transaction message is valid type\r\n  if (typeof transaction.message !== 'string') {\r\n    throw new Error('Invalid message type');\r\n  }\r\n\r\n  // Validate that the transaction message is valid if exists\r\n  if (transaction.message.length > TRANSACTION_MESSAGE_MAX_LENGTH) {\r\n    throw new Error(`Message exceeds ${TRANSACTION_MESSAGE_MAX_LENGTH} chacracters`);\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Coinbase transactions are always the first transactions in a block, and they reward the miner of the block with REWARD_AMOUNT\r\n * Checking its validity is different. The input's index is the block's index.\r\n * Q: Why does this have to have any inputs anyway? Maybe because the need to sign it? Would someone be able to steal an output otherwise?\r\n * Right now I'm just going to ignore the input and only have an output, before I understand this.\r\n */\r\nexport function validateCoinbaseTransaction(transaction: Transaction, blockHeight: number) {\r\n  // Validate id\r\n  const generatedId = generateTransactionID(transaction);\r\n  if (generatedId !== transaction.id) {\r\n    throw new Error('Transaction ID incorrect.')\r\n  }\r\n\r\n  if (transaction.inputs.length !== 1) {\r\n    throw new Error('Coinbase transaction can only have one input.');\r\n  }\r\n\r\n  if (transaction.inputs[0].transactionOutputIndex !== blockHeight) {\r\n    throw new Error('Coinbase transaction\\'s input must contain blockHeight as the output index.');\r\n  }\r\n\r\n  if (transaction.outputs.length !== 1) {\r\n    throw new Error('Coinbase transaction can only have one output.');\r\n  }\r\n\r\n  const correctRewardAmount = blockHeight === 1 ? 500 : REWARD_AMOUNT;\r\n\r\n  if (transaction.outputs[0].amount !== correctRewardAmount) {\r\n    throw new Error('Coinbase transaction value must be for ' + correctRewardAmount);\r\n  }\r\n\r\n  if (transaction.message !== 'Coinbase transaction') {\r\n    throw new Error('Coinbase transaction can\\'t include a custom message');\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Helper for converting a transaction's outputs into unspent transactions\r\n */\r\nexport function createUnspentTransactionOutputs(transaction: Transaction): UnspentTransactionOutput[] {\r\n  return transaction.outputs.map((output, index) => ({\r\n    transactionId: transaction.id,\r\n    index,\r\n    address: output.address,\r\n    amount: output.amount\r\n  }));\r\n}\r\n\r\n/**\r\n * Calculate all unspent transactions at the end of a blockchain, regardless of target address\r\n */\r\nexport function calculateUnspentOutputs(chain: Chain<Transaction[]>, unconfirmedTransactions: Transaction[]): UnspentTransactionOutput[] {\r\n  const chainWithUnconfirmed = [...chain, createBlock(unconfirmedTransactions, chain[chain.length - 1].hash)];\r\n  // TODO: I think there is a bug now when the input references a transaction in the same block\r\n  return chainWithUnconfirmed.reduce<UnspentTransactionOutput[]>((unspentTransactions, block) => {\r\n    // Gather all new outputs on this block\r\n    const newUnspentOutputs = block.data.reduce<UnspentTransactionOutput[]>((acc, transaction) => acc.concat(createUnspentTransactionOutputs(transaction)), []);\r\n    // Gather all inputs on this block, so we can use them to unvalidate older outputs\r\n    const allInputsOnThisBlock = block.data.reduce<TransactionInput[]>((acc, transaction) => acc.concat(transaction.inputs), []);\r\n    // Invalidate outputs based on these new inputs\r\n    const remainingUnspentTransactions: UnspentTransactionOutput[] = [...unspentTransactions, ...newUnspentOutputs].filter(unspentTransaction => {\r\n      // Remove unspenttransaction if the current block references it as an input\r\n      if (allInputsOnThisBlock.find(input => input.transactionId === unspentTransaction.transactionId && input.transactionOutputIndex === unspentTransaction.index)) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n    return remainingUnspentTransactions\r\n  }, []);\r\n}\r\n\r\n/**\r\n * Get all unspent transactions of a single user\r\n */\r\nexport function unspentTransactionsOfAddress(chain: Chain<Transaction[]>, unconfirmedTransactions: Transaction[], address: string): UnspentTransactionOutput[] {\r\n  const allUnspentTransactions = calculateUnspentOutputs(chain, unconfirmedTransactions);\r\n  return allUnspentTransactions.filter(transaction => transaction.address === address);\r\n}\r\n\r\n/**\r\n * Get remaining coins of a single user\r\n */\r\nexport function balanceOfAddress(chain: Chain<Transaction[]>, unconfirmedTransactions: Transaction[], address: string): number {\r\n  const unspentTransactions = unspentTransactionsOfAddress(chain, unconfirmedTransactions, address);\r\n  return unspentTransactions.reduce((acc, transaction) => acc + transaction.amount, 0);\r\n}\r\n\r\n/**\r\n * Helper for creating an input from an unspent output\r\n */\r\nexport function createUnsignedInputFromUnspentOutput(output: UnspentTransactionOutput): TransactionInput {\r\n  return {\r\n    signature: '',\r\n    transactionId: output.transactionId,\r\n    transactionOutputIndex: output.index,\r\n  };\r\n}\r\n\r\n/**\r\n * Helper for creating a one way transaction output\r\n */\r\nexport function createOutputs(myPublicKey: string, receiverPublicKey: string, amount: number, leftoverAmount: number): TransactionOutput[] {\r\n  if (leftoverAmount > 0) {\r\n    return [{\r\n      address: receiverPublicKey,\r\n      amount\r\n    }, {\r\n      address: myPublicKey,\r\n      amount: leftoverAmount\r\n    }];\r\n  }\r\n\r\n  return [{\r\n    address: receiverPublicKey,\r\n    amount\r\n  }];\r\n}\r\n\r\n/**\r\n * Find the sender's address based on the inputs of the transaction\r\n */\r\nexport function getSenderAddress(transaction: Transaction, chain: Chain<Transaction[]>): string | null {\r\n  const sampleInput = transaction.inputs[0];\r\n  if (!sampleInput.transactionId) {\r\n    return null;\r\n  }\r\n  const outputTransactionBlock = chain.find(block => block.data.find(transaction => transaction.id === sampleInput.transactionId));\r\n  const outputTransaction = outputTransactionBlock?.data.find(transaction => transaction.id === sampleInput.transactionId);\r\n  const output = outputTransaction?.outputs[sampleInput.transactionOutputIndex];\r\n  return output?.address || null;\r\n}\r\n\r\n/**\r\n * Get all transactions an address was involved in\r\n */\r\nexport function getTransactionsOfAddress(chain: Chain<Transaction[]>, unconfirmedTransactions: Transaction[], address: string): Transaction[] {\r\n  const transactions = chain.reduce<Transaction[]>((acc, block) => acc.concat(block.data), []).concat(unconfirmedTransactions);\r\n  console.log(transactions);\r\n  return transactions.filter(transaction => {\r\n    return transaction.outputs.find(output => output.address === address) || getSenderAddress(transaction, chain) === address\r\n  });\r\n}","import { Card, CardContent, Divider, makeStyles, Typography } from '@material-ui/core';\r\nimport React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { getSenderAddress, Transaction } from '../../../src/transaction';\r\nimport { DataContext } from './DataProvider';\r\n\r\ntype Props = {\r\n  transaction: Transaction;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  hash: {\r\n    fontSize: 12\r\n  }\r\n});\r\n\r\nexport function shortAddress(hash: string): string {\r\n  return `${hash.substr(0, 8)}...${hash.substr(-8)}`;\r\n}\r\n\r\nexport default function TransactionComponent({ transaction }: Props) {\r\n  const classes = useStyles();\r\n  const chain = useContext(DataContext);\r\n\r\n  const sender = getSenderAddress(transaction, chain);\r\n\r\n  const senderDisplay = sender ? <Link to={`/wallet/${sender}`}>{shortAddress(sender)}</Link> : <strong>COINBASE</strong>\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardContent>\r\n          <Typography color=\"textSecondary\" className={classes.hash}>{transaction.id}</Typography>\r\n          <Typography>\r\n            {transaction.outputs.map((output, i) => (\r\n              <div key={i}>\r\n                {senderDisplay} &gt; <Link to={`/wallet/${output.address}`}>{shortAddress(output.address)}</Link> for <strong>{output.amount}</strong> coins\r\n              </div>\r\n            ))}\r\n          </Typography>\r\n          {transaction.message && (\r\n            <Typography>\r\n              Included message: \"{transaction.message}\"\r\n            </Typography>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n      <Divider />\r\n    </>\r\n  )\r\n}","import { makeStyles, Card, CardContent, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { Block } from '../../../src/block';\r\nimport { Transaction } from '../../../src/transaction';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport TransactionComponent from './Transaction';\r\n\r\ntype Props = {\r\n  block: Block<Transaction[]>;\r\n  index: number;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  hash: {\r\n    fontSize: 12\r\n  }\r\n});\r\n\r\nexport default function BlockComponent({ block, index }: Props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography component=\"h2\" variant=\"h6\" color=\"textSecondary\" gutterBottom>\r\n          Block {index}\r\n        </Typography>\r\n        <Typography color=\"textSecondary\" className={classes.hash}>\r\n          {block.hash}\r\n        </Typography>\r\n        <Typography color=\"textSecondary\" className={classes.hash} gutterBottom>\r\n          {new Date(block.timestamp).toLocaleString()}\r\n        </Typography>\r\n\r\n      </CardContent>\r\n        <Accordion>\r\n          <AccordionSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            aria-controls=\"panel1a-content\"\r\n            id=\"panel1a-header\"\r\n          >\r\n            <Typography color=\"textSecondary\">Transactions</Typography>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n              <Grid container spacing={1}>\r\n                {block.data.map(transaction => (\r\n                  <Grid item xs={12}>\r\n                    <TransactionComponent key={transaction.id} transaction={transaction} />\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n          </AccordionDetails>\r\n        </Accordion>\r\n\r\n    </Card>\r\n  )\r\n}","import { Grid } from \"@material-ui/core\";\r\nimport React, { useContext, useMemo } from \"react\";\r\nimport BlockComponent from \"./Block\";\r\nimport { DataContext } from \"./DataProvider\";\r\n\r\nexport default function BlockList() {\r\n  const chain = useContext(DataContext);\r\n\r\n  const reversedChain = useMemo(() => [...chain].reverse(), [chain]);\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      {reversedChain.map((block, i) => (\r\n        <Grid item lg={6}>\r\n          <BlockComponent block={block} key={block.hash} index={reversedChain.length - i} />\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  )\r\n}","import { Grid, makeStyles, Paper, Table, TableBody, TableCell, TableHead, TableRow, Typography } from \"@material-ui/core\";\r\nimport React, { useContext, useMemo } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { balanceOfAddress, getSenderAddress, getTransactionsOfAddress } from \"../../../src/transaction\";\r\nimport { DataContext } from \"./DataProvider\";\r\nimport { shortAddress } from \"./Transaction\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    wordBreak: 'break-all'\r\n  }\r\n}));\r\n\r\n\r\n\r\nexport default function Wallet() {\r\n  const { address } = useParams<{ address: string }>();\r\n  const chain = useContext(DataContext);\r\n  const classes = useStyles();\r\n  const balance = chain.length > 0 ? balanceOfAddress(chain, [], address) : null;\r\n  const transactions = useMemo(() => {\r\n    return getTransactionsOfAddress(chain, [], address).reverse();\r\n  }, [address, chain]);\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <Paper className={classes.paper}>\r\n            <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>Wallet {address}</Typography>\r\n            {balance !== null && <Typography component=\"h3\" variant=\"h6\" color=\"textSecondary\" gutterBottom>Balance: {balance}</Typography>}\r\n            <Table size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Incoming / Outgoing</TableCell>\r\n                  <TableCell>Address</TableCell>\r\n                  <TableCell align=\"right\">Amount</TableCell>\r\n                  <TableCell>Message</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {transactions.map((transaction) => {\r\n                  const isCoinbase = transaction.inputs.length === 1 &&\r\n                    transaction.outputs.length === 1 &&\r\n                    Number.isInteger(transaction.inputs[0].transactionOutputIndex) &&\r\n                    transaction.inputs[0].transactionId === '';\r\n                  const isSendingToYourself = !isCoinbase && !transaction.outputs.map(o => o.address).find(a => a !== address);\r\n                  if (isSendingToYourself) {\r\n                    return null;\r\n                  }\r\n                  const senderAddress = getSenderAddress(transaction, chain);\r\n                  const isOutgoing = senderAddress === address;\r\n                  const relevantOutput = isOutgoing ?\r\n                    transaction.outputs.find(output => output.address !== address) :\r\n                    transaction.outputs.find(output => output.address === address);\r\n                  const otherAddress = isOutgoing ? relevantOutput?.address : senderAddress;\r\n                  const otherAddressDisplay = otherAddress ? <Link to={`/wallet/${otherAddress}`}>{shortAddress(otherAddress)}</Link> : (isCoinbase ? 'COINBASE' : '-');\r\n                  return (\r\n                    <TableRow key={transaction.id}>\r\n                      <TableCell>{isOutgoing ? 'Outgoing' : 'Incoming'}</TableCell>\r\n                      <TableCell>{otherAddressDisplay}</TableCell>\r\n                      <TableCell align=\"right\">{otherAddress ? relevantOutput?.amount : transaction.outputs[0].amount}</TableCell>\r\n                      <TableCell>{transaction.message}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  )\r\n}","import { Grid, makeStyles, Paper, TextField, Typography } from \"@material-ui/core\";\r\nimport React, { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DataContext } from \"./DataProvider\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    wordBreak: 'break-all'\r\n  }\r\n}));\r\n\r\n\r\nexport default function MyWallet() {\r\n  const classes = useStyles();\r\n  const [publicKey, setPublicKey] = useState(localStorage.getItem('publicKey') || '');\r\n  const [secret, setSecret] = useState(localStorage.getItem('secret') || '');\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('publicKey', publicKey);\r\n    localStorage.setItem('secret', secret);\r\n  }, [publicKey, secret]);\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Grid item xs={12}>\r\n        <Paper className={classes.paper}>\r\n          <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>My Wallet</Typography>\r\n          <Typography component=\"h3\" variant=\"h6\" color=\"textSecondary\" gutterBottom>Set your wallet details</Typography>\r\n          <TextField label=\"Public key\" variant=\"outlined\" value={publicKey} onChange={(event: React.ChangeEvent<HTMLInputElement>) => setPublicKey(event.target.value)} margin=\"normal\" />\r\n          <TextField label=\"Secret key\" variant=\"outlined\" value={secret} onChange={(event: React.ChangeEvent<HTMLInputElement>) => setSecret(event.target.value)} margin=\"normal\" />\r\n          {publicKey && <Link to={`/wallet/${publicKey}`}>Go to wallet</Link>}\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}","import React from 'react';\r\nimport DataProvider from './components/DataProvider';\r\nimport Layout from './components/Layout';\r\nimport { HashRouter, Switch, Route } from 'react-router-dom';\r\nimport BlockList from './components/BlockList';\r\nimport Wallet from './components/Wallet';\r\nimport MyWallet from './components/MyWallet';\r\n\r\nexport default function App() {\r\n\r\n  return (\r\n    <DataProvider>\r\n      <HashRouter>\r\n        <Layout>\r\n            <Switch>\r\n              <Route path=\"/chain-explorer\">\r\n                <BlockList />\r\n              </Route>\r\n              <Route path=\"/wallet\" exact>\r\n                <MyWallet />\r\n              </Route>\r\n              <Route path=\"/wallet/:address\">\r\n                <Wallet />\r\n              </Route>\r\n            </Switch>\r\n        </Layout>\r\n      </HashRouter>\r\n    </DataProvider>\r\n  )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render((\r\n  <App />\r\n), document.getElementById('root'));\r\n"],"sourceRoot":""}