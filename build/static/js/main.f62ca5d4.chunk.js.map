{"version":3,"sources":["client/src/utils/getJson.ts","client/src/components/DataProvider.tsx","client/src/components/Layout.tsx","src/util.ts","src/block.ts","src/transaction.ts","client/src/components/Transaction.tsx","client/src/components/Block.tsx","client/src/components/BlockList.tsx","client/src/components/Wallet.tsx","client/src/components/MyWallet.tsx","client/src/components/miner.worker.ts","client/src/components/Mine.tsx","client/src/App.tsx","client/src/index.tsx"],"names":["ROOT","getJson","path","fetch","mode","credentials","then","response","json","data","catch","err","console","error","DataContext","createContext","chain","unconfirmedTransactions","DataProvider","children","useState","setChain","setUnconfirmedTransactions","fetchChain","useCallback","fetchUnconfirmedTransactions","fetchAllData","useEffect","setInterval","value","useMemo","Provider","useStyles","makeStyles","theme","root","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","spacing","breakpoints","up","appBarSpacer","content","height","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","Layout","classes","React","open","setOpen","history","useHistory","className","CssBaseline","AppBar","clsx","Toolbar","IconButton","edge","color","aria-label","onClick","Typography","component","variant","noWrap","Drawer","Divider","List","ListItem","button","push","ListItemIcon","ListItemText","primary","Container","maxWidth","Grid","crypto","require","getHash","hash","createHash","update","digest","calculateBlockHash","block","previousHash","timestamp","nonce","JSON","stringify","getHashBase","updateHash","createBlock","Date","now","getDifficultyForNextBlockFromTimestamps","timestamps","chunkLength","getNextChunk","remainingArray","collectedArrays","length","slice","reduce","difficulty","currentChunk","averageMiningTime","arr","averageDifference","DIFFICULTY_EXPECTED_MINING_TIME","Math","min","max","ec","ecdsa","generateTransactionID","transaction","inputs","map","input","transactionId","transactionOutputIndex","join","outputs","output","address","amount","message","signTransactionInputs","secretKey","key","keyFromPrivate","signature","byteArray","sign","id","toDER","Array","from","byte","toString","createCoinbaseTransaction","blockHeight","publicKey","createTransaction","unspentTransactionsOfAddress","unspentTransactions","newUnspentOutputs","acc","concat","index","createUnspentTransactionOutputs","allInputsOnThisBlock","filter","unspentTransaction","find","calculateUnspentOutputs","getSenderAddress","sampleInput","outputTransactionBlock","outputTransaction","fontSize","shortAddress","substr","TransactionComponent","sender","useContext","senderDisplay","to","Card","CardContent","i","BlockComponent","gutterBottom","toLocaleString","Accordion","AccordionSummary","expandIcon","aria-controls","AccordionDetails","item","xs","BlockList","reversedChain","reverse","lg","wordBreak","Wallet","useParams","balance","balanceOfAddress","transactions","log","getTransactionsOfAddress","Paper","Table","size","TableHead","TableRow","TableCell","align","TableBody","isCoinbase","Number","isInteger","o","a","senderAddress","isOutgoing","relevantOutput","otherAddress","otherAddressDisplay","MyWallet","localStorage","getItem","setPublicKey","secret","setSecret","setItem","TextField","label","onChange","event","target","margin","Worker_fn","Worker","text","select","hashCount","setHashCount","setBlock","solutions","setSolutions","cores","setCores","workers","useRef","progressInfo","coinbaseTransaction","unminedBlock","getDifficultyForNextBlock","onWorkerEvent","workerEvent","type","count","newWorkers","miner","Miner","postMessage","onmessage","current","forEach","worker","terminate","body","method","headers","res","handleCoresChange","hashRate","FormControl","Select","labelId","navigator","hardwareConcurrency","fill","_","MenuItem","floor","App","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f62ca5d4.chunk.js","sourcesContent":["const ROOT = 'http://hyggecoin.herokuapp.com';\n\nexport default function getJson<T>(path: string): Promise<T> {\n  return fetch(ROOT + path, {\n    mode: 'cors',\n    credentials: 'omit'\n  })\n    .then(response => response.json())\n    .then(response => (response.data))\n    .catch(err => console.error(err));\n}\n\nexport function post(path: string, body: any) {\n  return fetch(ROOT + path, {\n    method: 'POST',\n    body: JSON.stringify(body),\n    mode: 'cors',\n    credentials: 'omit',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n  .then(res => res.json())\n  .then(res => res.data)\n}","import React, { createContext, useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport getJson from \"../utils/getJson\";\r\nimport { Chain } from \"../../../src/block\";\r\nimport { Transaction } from \"../../../src/transaction\";\r\n\r\nconst DataContext = createContext<{\r\n  chain: Chain<Transaction[]>,\r\n  unconfirmedTransactions: Transaction[] | null\r\n}>({\r\n  chain: [],\r\n  unconfirmedTransactions: null\r\n});\r\n\r\nexport default function DataProvider({ children }: { children: React.ReactElement}): React.ReactElement {\r\n\r\n  const [chain, setChain] = useState<Chain<Transaction[]>>([]);\r\n  const [unconfirmedTransactions, setUnconfirmedTransactions] = useState<Transaction[] | null>(null);\r\n\r\n  const fetchChain = useCallback(() => {\r\n    getJson<Chain<Transaction[]>>('/chain').then(data => setChain(data));\r\n  }, []);\r\n\r\n  const fetchUnconfirmedTransactions = useCallback(() => {\r\n    getJson<Transaction[]>('/unconfirmed-transactions').then(data => setUnconfirmedTransactions(data));\r\n  }, []);\r\n\r\n  const fetchAllData = useCallback(() => {\r\n    fetchChain()\r\n    fetchUnconfirmedTransactions();\r\n  }, [fetchChain, fetchUnconfirmedTransactions]);\r\n\r\n  useEffect(() => {\r\n    fetchAllData();\r\n    setInterval(fetchAllData, 20 * 1000);\r\n  }, [fetchAllData]);\r\n\r\n  const value = useMemo(() => ({\r\n    chain,\r\n    unconfirmedTransactions\r\n  }), [chain, unconfirmedTransactions])\r\n\r\n  return (\r\n    <DataContext.Provider value={value}>\r\n      {children}\r\n    </DataContext.Provider>\r\n  );\r\n}\r\n\r\nexport {\r\n  DataContext\r\n};","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport WalletIcon from '@material-ui/icons/AccountBalanceWallet';\r\nimport MemoryIcon from '@material-ui/icons/Memory';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default function Layout({ children }: { children: React.ReactElement }) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n            Hyggecoin\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          <div>\r\n            <ListItem button onClick={() => history.push(\"/chain-explorer\")}>\r\n              <ListItemIcon>\r\n                <DashboardIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Chain Explorer\" />\r\n            </ListItem>\r\n            <ListItem button onClick={() => history.push(\"/wallet\")}>\r\n              <ListItemIcon>\r\n                <WalletIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"My Wallet\" />\r\n            </ListItem>\r\n            <ListItem button onClick={() => history.push(\"/mine\")}>\r\n              <ListItemIcon>\r\n                <MemoryIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Mine Coins\" />\r\n            </ListItem>\r\n          </div>\r\n        </List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            {children}\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}","const crypto = require('crypto');\r\n\r\nexport function getHash(content: string): string {\r\n  const hash = crypto.createHash('sha256');\r\n  hash.update(content);\r\n  return hash.digest('hex');\r\n}\r\n\r\nexport function toHexString(byteArray: any[]): string {\r\n  return Array.from(byteArray, (byte: any) => {\r\n      return ('0' + (byte & 0xFF).toString(16)).slice(-2);\r\n  }).join('');\r\n};\r\n\r\n/**\r\n * Split an array into arrays of a fixed length\r\n * Leftover items are included in the last array of fewer than the given length items\r\n */\r\nexport function chunk<T>(arr: T[], chunkLength: number): T[][] {\r\n  function getNextChunk(remainingArray: T[], collectedArrays: T[][]): T[][] {\r\n    if (remainingArray.length < chunkLength) {\r\n      return [...collectedArrays, remainingArray]\r\n    }\r\n    return getNextChunk(remainingArray.slice(chunkLength), [...collectedArrays, remainingArray.slice(0, chunkLength)]);\r\n  }\r\n  return getNextChunk(arr, []);\r\n}\r\n\r\n/**\r\n * The average of the difference between items in an array\r\n */\r\nexport function averageDifference(arr: number[]): number {\r\n  return (arr[arr.length - 1] - arr[0]) / (arr.length - 1);\r\n}","import { averageDifference, chunk, getHash } from \"./util\";\r\n\r\n/**\r\n * A single block in a blockchain\r\n */\r\nexport type Block<T> = {\r\n  /**\r\n   * Reference to the previous block. Since the blockchain is basically a linked list, this is how we know they string together.\r\n   * Also included in the current block's hash, so that the chain can't be altered without altering all the rest of it\r\n   */\r\n  previousHash: string;\r\n  /**\r\n   * Computed from the data, timestamp, previous block's hash and nonce. Any of those change, and the hash changes.\r\n   */\r\n  hash: string;\r\n  /**\r\n   * Time of block creation\r\n   */\r\n  timestamp: number;\r\n  /**\r\n   * Arbitrary data. In a cryptocurrency, this will hold the transactions encoded in the block\r\n   */\r\n  data: T;\r\n  /**\r\n   * A random number included at the end of the content for hash calculation, that resulted in the block passing the difficulty test\r\n   */\r\n  nonce: number\r\n}\r\n\r\n/**\r\n * A linked list of blocks\r\n */\r\nexport type Chain<T> = Block<T>[];\r\n\r\n/**\r\n * Get the string from a block the hash is calculated from\r\n */\r\nexport function getHashBase<T>({\r\n  previousHash,\r\n  timestamp,\r\n  data,\r\n  nonce\r\n}: Block<T>): string {\r\n  return previousHash + timestamp + JSON.stringify(data) + nonce;\r\n}\r\n\r\n/**\r\n * Calculate a block's hash based on all its other information, ensuring that you can't change the contents of the block without the hash changing\r\n * Uses sha256\r\n */\r\nexport function calculateBlockHash<T>(block: Block<T>): string {\r\n  return getHash(getHashBase(block));\r\n}\r\n\r\n/**\r\n * Update a block with its calculated hash and return the resulting block.\r\n * When you create a block, you should leave the hash empty and call this function.\r\n */\r\nexport function updateHash<T>(block: Block<T>): Block<T> {\r\n  return { ...block, hash: calculateBlockHash(block) };\r\n}\r\n\r\n/**\r\n * Update the block with a new once and corresponding hash, and return the resulting block\r\n */\r\nexport function nextNonce<T>(block: Block<T>): Block<T> {\r\n  return updateHash({ ...block, nonce: block.nonce + 1 })\r\n}\r\n\r\n/**\r\n * Check whether a sha256 hash matches a given difficulty, meaning whether it starts with difficulty number of 0s\r\n */\r\nexport function checkDifficulty(difficulty: number, hash: string): boolean {\r\n  return hash.substr(0, difficulty) === \"0\".repeat(difficulty)\r\n}\r\n\r\n/**\r\n * Change the nonce property of a block until the resulting hash passes the given difficulty\r\n */\r\nexport function mineBlock<T>(difficulty: number, block: Block<T>) {\r\n  let finishedBlock = block;\r\n  while (!checkDifficulty(difficulty, finishedBlock.hash)) {\r\n    finishedBlock = nextNonce(finishedBlock);\r\n    console.log(finishedBlock.nonce, finishedBlock.hash);\r\n  }\r\n  return finishedBlock;\r\n}\r\n\r\n/**\r\n * Helper for creating a block with a calculated hash\r\n */\r\nexport function createBlock<T>(data: T, previousHash: string): Block<T> {\r\n  return updateHash({\r\n    timestamp: Date.now(),\r\n    data,\r\n    previousHash,\r\n    hash: '',\r\n    nonce: 0\r\n  });\r\n}\r\n\r\n/**\r\n * Validates a chain, ensuring that all blocks' hash are correct and they chain together\r\n */\r\nexport function validateChain<T>(chain: Chain<T>) {\r\n  return chain.map((block, i) => {\r\n    // Genesis block is always valid\r\n    if (i === 0) {\r\n      return true;\r\n    }\r\n    // Validate the block\r\n    return (\r\n      block.hash === calculateBlockHash(block) && // block hash checks out\r\n      block.previousHash === chain[i -1].hash // previousHash is the save as previous block's hash\r\n    );\r\n  }).filter(isValid => !isValid).length === 0;\r\n}\r\n\r\n/**\r\n * The number of blocks after which we recheck the difficulty\r\n */\r\nexport const DIFFICULTY_CHECK_INTERVAL = 20;\r\n\r\nexport const MINUTE = 1000 * 60;\r\nexport const HOUR = 60 * MINUTE;\r\n\r\n/**\r\n * Expected time for a block to be mined\r\n */\r\nexport const DIFFICULTY_EXPECTED_MINING_TIME = 20 * MINUTE;\r\n\r\n/**\r\n * If the average mining time was lower or larger by this amount than the expected, don't update the difficulty\r\n */\r\nexport const DIFFICULTY_ALLOWED_DIFFERENCE_MULTIPLIER = 0.2;\r\n\r\n/**\r\n * The starting difficulty for an empty chain\r\n */\r\nexport const DIFFICULTY_STARTING = 6;\r\n\r\nexport const DIFFICULTY_MIN = 5;\r\nexport const DIFFICULTY_MAX = 15;\r\n\r\n/**\r\n * Gets required difficulty at the end of a given timestamp array. For testability purposes\r\n */\r\nexport function getDifficultyForNextBlockFromTimestamps(timestamps: number[]): number {\r\n  // Split the array into equal length chunks\r\n  const chunks = chunk(timestamps, DIFFICULTY_CHECK_INTERVAL);\r\n  return chunks.reduce<number>((difficulty, currentChunk) => {\r\n    // Only change difficulty for full chunks - ignore the last, incomplete chunk\r\n    if (currentChunk.length < DIFFICULTY_CHECK_INTERVAL) {\r\n      return difficulty;\r\n    }\r\n    // Calculate averate mining time\r\n    const averageMiningTime = averageDifference(currentChunk);\r\n    if (averageMiningTime > DIFFICULTY_EXPECTED_MINING_TIME * (1 + DIFFICULTY_ALLOWED_DIFFERENCE_MULTIPLIER)) {\r\n      return Math.min(difficulty - 1, DIFFICULTY_MAX);\r\n    }\r\n\r\n    if (averageMiningTime < DIFFICULTY_EXPECTED_MINING_TIME * (1 - DIFFICULTY_ALLOWED_DIFFERENCE_MULTIPLIER)) {\r\n      return Math.max(difficulty + 1, DIFFICULTY_MIN);\r\n    }\r\n\r\n    return difficulty;\r\n  }, DIFFICULTY_STARTING);\r\n}\r\n\r\n/**\r\n * Gets the required difficulty at the end of a given chain\r\n */\r\nexport function getDifficultyForNextBlock<T>(chain: Block<T>[]): number {\r\n  return getDifficultyForNextBlockFromTimestamps(chain.map(block => block.timestamp));\r\n}","import { getHash, toHexString } from \"./util\";\r\nimport * as ecdsa from 'elliptic';\r\nimport { Chain, createBlock } from \"./block\";\r\n\r\nconst ec = new ecdsa.ec('secp256k1');\r\n\r\n/**\r\n * Amount of coins rewarded for the miner of the block\r\n */\r\nexport const REWARD_AMOUNT = 10;\r\n\r\n/**\r\n * Max characters length of the transaction message\r\n */\r\nexport const TRANSACTION_MESSAGE_MAX_LENGTH = 130;\r\n\r\nexport type TransactionOutput = {\r\n  /**\r\n   * This is the public key of the user the number of coins are sent to\r\n   */\r\n  address: string;\r\n  /**\r\n   * Number of coins to send\r\n   */\r\n  amount: number;\r\n}\r\n\r\n/**\r\n * This is a utility type to hold information needed when handling unspent transaction outputs. Otherwise the entire transaction would need to be passed around.\r\n */\r\nexport type UnspentTransactionOutput = {\r\n  /**\r\n   * Id of the transaction this output belongs to\r\n   */\r\n  transactionId: string;\r\n  /**\r\n   * Index of the output inside the transaction outputs. Needed because one transaction can have multiple outputs, and we need to find the corresponding output when we verify\r\n   */\r\n  index: number;\r\n  /**\r\n   * Public key of recipient. Copied from the output directly.\r\n   */\r\n  address: string;\r\n  /**\r\n   * Amount of coins sent. Copied from the output directly.\r\n   */\r\n  amount: number;\r\n}\r\n\r\nexport type TransactionInput = {\r\n\r\n  /**\r\n   * The sender must sign this input with their private key\r\n   * Q: why is not the whole transaction signed instead of the individual inputs, since we use the transaction id as the content for the signature anyway?\r\n   */\r\n  signature: string;\r\n  /**\r\n   * The id of the transaction that holds the unspent output this input is referencing.\r\n   */\r\n  transactionId: string;\r\n  /**\r\n   * Since one transaction can have a number of outputs, we need to know the index of the output inside that transaction this input is referencing\r\n   */\r\n  transactionOutputIndex: number;\r\n}\r\n\r\nexport type Transaction = {\r\n  /**\r\n   * Derived from all other fields of the transaction, excluding signatures. When the data changes, the id should change.\r\n   */\r\n  id: string;\r\n  /**\r\n   * References to unspent outputs belonging to the user\r\n   */\r\n  inputs: TransactionInput[];\r\n  /**\r\n   * All outputs must add up to the total value of all inputs. If there is some leftover, an output should be added that sends the leftover back to the sender.\r\n   */\r\n  outputs: TransactionOutput[];\r\n  /**\r\n   * Optional message to be included with the transaction\r\n   */\r\n  message: string;\r\n}\r\n\r\n/**\r\n * Generate a has from the transaction's inputs and outputs to use as the id of the transaction\r\n */\r\nexport function generateTransactionID(transaction: Transaction): string {\r\n  const content = transaction.inputs.map(input => input.transactionId + input.transactionOutputIndex).join('') +\r\n    transaction.outputs.map(output => output.address + output.amount).join('') +\r\n    (transaction.message || '');\r\n  return getHash(content);\r\n}\r\n\r\n/**\r\n * Using your private key, sign a transaction's inputs\r\n */\r\nexport function signTransactionInputs(transaction: Transaction, secretKey: string): Transaction {\r\n  const key = ec.keyFromPrivate(secretKey, 'hex');\r\n  return ({\r\n    ...transaction,\r\n    inputs: transaction.inputs.map(input => {\r\n      return {\r\n        ...input,\r\n        signature: toHexString(key.sign(transaction.id).toDER())\r\n      };\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * Using your private key, sign a transaction's inputs and generate its id\r\n */\r\nexport function signTransaction(transaction: Transaction, secretKey: string): Transaction {\r\n  return signTransactionInputs({\r\n    ...transaction,\r\n    id: generateTransactionID(transaction)\r\n  }, secretKey);\r\n}\r\n\r\n/**\r\n * Helper for creating a transaction with calculated id, and signed\r\n */\r\nexport function createTransaction(inputs: TransactionInput[], outputs: TransactionOutput[], message: string, secretKey: string): Transaction {\r\n  let transaction = {\r\n    id: '',\r\n    inputs,\r\n    message,\r\n    outputs\r\n  };\r\n  transaction = {\r\n    ...transaction,\r\n    id: generateTransactionID(transaction)\r\n  };\r\n  return signTransactionInputs(transaction, secretKey);\r\n}\r\n\r\n/**\r\n * Helper for creating a coinbase transaction\r\n */\r\nexport function createCoinbaseTransaction(blockHeight: number, publicKey: string, secretKey: string): Transaction {\r\n  return createTransaction([{\r\n    signature: '',\r\n    transactionId: '',\r\n    transactionOutputIndex: blockHeight\r\n  }], [{\r\n    address: publicKey,\r\n    amount: blockHeight === 1 ? 500 : REWARD_AMOUNT\r\n  }], 'Coinbase transaction', secretKey);\r\n}\r\n\r\n/**\r\n * Validate transaction outputs\r\n */\r\nexport function validateOutput(output: TransactionOutput): Error | null {\r\n\r\n  // Validate output address\r\n  if (typeof output.address !== 'string') {\r\n    throw new Error('Output address needs to be a valid address');\r\n  }\r\n\r\n  // Validate that no outputs are for 0 amount\r\n  if (output.amount === 0) {\r\n    throw new Error('Can\\'t create output for 0');\r\n  }\r\n\r\n  // Validate that no outputs are for negative amount\r\n  if (output.amount < 0) {\r\n    throw new Error('Can\\'t create output for negative amount');\r\n  }\r\n\r\n  // Validate that no outputs are for more than javascript's safe integer\r\n  if (output.amount > Number.MAX_SAFE_INTEGER) {\r\n    throw new Error(`Can\\'t create output for more than ${Number.MAX_SAFE_INTEGER}`);\r\n  }\r\n\r\n  // Validate that no fraction outputs have a greater precision than allowed\r\n  if (!Number.isInteger(output.amount)) {\r\n    throw new Error(`Only whole coins can be sent`);\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/**\r\n * Determines whether a transaction is valid or not, checking id and that the inputs are valid, and that inputs equal outputs\r\n */\r\nexport function validateTransaction(transaction: Transaction, myUnspentTransactionOutputs: UnspentTransactionOutput[], unconfirmedTransactions: Transaction[]): boolean {\r\n  // Validate id\r\n  if (generateTransactionID(transaction) !== transaction.id) {\r\n    throw new Error('Transaction ID incorrect');\r\n  }\r\n\r\n  // Validate that the transaction doesn't reference an input that has already been referenced by another unconfirmed transaction\r\n  const allExistingInputs = unconfirmedTransactions.reduce<TransactionInput[]>((arr, transaction) => [...arr, ...transaction.inputs], []);\r\n  const referencesLockedTransaction = transaction.inputs.find(newInput => allExistingInputs.find(existingInput => existingInput.transactionId === newInput.transactionId && existingInput.transactionOutputIndex == newInput.transactionOutputIndex));\r\n  if (referencesLockedTransaction) {\r\n    throw new Error('Transaction references an output already used by another unconfirmed transaction');\r\n  }\r\n\r\n  // Validate that all inputs are unspent and belong to the user\r\n  const allInputsValid = transaction.inputs.map(input => {\r\n    const referencedOutput = myUnspentTransactionOutputs.find(unspentOutput => unspentOutput.transactionId === input.transactionId && unspentOutput.index === input.transactionOutputIndex);\r\n    if (!referencedOutput) {\r\n      console.error('Referenced output doesn\\'t exist');\r\n      return false;\r\n    }\r\n    const address = referencedOutput.address;\r\n    const key = ec.keyFromPublic(address, 'hex');\r\n    return key.verify(transaction.id, input.signature);\r\n  }).filter(Boolean).length === transaction.inputs.length;\r\n\r\n  if (!allInputsValid) {\r\n    throw new Error('Not all inputs are valid for transaction.')\r\n  }\r\n\r\n  // Check that all inputs equal outputs\r\n  const inputValue = transaction.inputs.reduce((acc, input) => {\r\n    const referencedOutput = myUnspentTransactionOutputs.find(unspentOutput => unspentOutput.transactionId === input.transactionId && unspentOutput.index === input.transactionOutputIndex);\r\n    if (!referencedOutput) {\r\n      return 0;\r\n    }\r\n    return acc + referencedOutput.amount;\r\n  }, 0);\r\n  const outputValue = transaction.outputs.reduce((acc, output) => acc + output.amount, 0);\r\n  if (inputValue !== outputValue) {\r\n    throw new Error('Input and output values do not match in transaction.');\r\n  }\r\n\r\n  // Validate outputs\r\n  transaction.outputs.forEach(output => validateOutput(output));\r\n\r\n  // Validate that the transaction message is valid type\r\n  if (typeof transaction.message !== 'string') {\r\n    throw new Error('Invalid message type');\r\n  }\r\n\r\n  // Validate that the transaction message is valid if exists\r\n  if (transaction.message.length > TRANSACTION_MESSAGE_MAX_LENGTH) {\r\n    throw new Error(`Message exceeds ${TRANSACTION_MESSAGE_MAX_LENGTH} chacracters`);\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Coinbase transactions are always the first transactions in a block, and they reward the miner of the block with REWARD_AMOUNT\r\n * Checking its validity is different. The input's index is the block's index.\r\n * Q: Why does this have to have any inputs anyway? Maybe because the need to sign it? Would someone be able to steal an output otherwise?\r\n * Right now I'm just going to ignore the input and only have an output, before I understand this.\r\n */\r\nexport function validateCoinbaseTransaction(transaction: Transaction, blockHeight: number) {\r\n  // Validate id\r\n  const generatedId = generateTransactionID(transaction);\r\n  if (generatedId !== transaction.id) {\r\n    throw new Error('Transaction ID incorrect.')\r\n  }\r\n\r\n  if (transaction.inputs.length !== 1) {\r\n    throw new Error('Coinbase transaction can only have one input.');\r\n  }\r\n\r\n  if (transaction.inputs[0].transactionOutputIndex !== blockHeight) {\r\n    throw new Error('Coinbase transaction\\'s input must contain blockHeight as the output index.');\r\n  }\r\n\r\n  if (transaction.outputs.length !== 1) {\r\n    throw new Error('Coinbase transaction can only have one output.');\r\n  }\r\n\r\n  const correctRewardAmount = blockHeight === 1 ? 500 : REWARD_AMOUNT;\r\n\r\n  if (transaction.outputs[0].amount !== correctRewardAmount) {\r\n    throw new Error('Coinbase transaction value must be for ' + correctRewardAmount);\r\n  }\r\n\r\n  if (transaction.message !== 'Coinbase transaction') {\r\n    throw new Error('Coinbase transaction can\\'t include a custom message');\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Helper for converting a transaction's outputs into unspent transactions\r\n */\r\nexport function createUnspentTransactionOutputs(transaction: Transaction): UnspentTransactionOutput[] {\r\n  return transaction.outputs.map((output, index) => ({\r\n    transactionId: transaction.id,\r\n    index,\r\n    address: output.address,\r\n    amount: output.amount\r\n  }));\r\n}\r\n\r\n/**\r\n * Calculate all unspent transactions at the end of a blockchain, regardless of target address\r\n */\r\nexport function calculateUnspentOutputs(chain: Chain<Transaction[]>, unconfirmedTransactions: Transaction[]): UnspentTransactionOutput[] {\r\n  const chainWithUnconfirmed = [...chain, createBlock(unconfirmedTransactions, chain[chain.length - 1].hash)];\r\n  // TODO: I think there is a bug now when the input references a transaction in the same block\r\n  return chainWithUnconfirmed.reduce<UnspentTransactionOutput[]>((unspentTransactions, block) => {\r\n    // Gather all new outputs on this block\r\n    const newUnspentOutputs = block.data.reduce<UnspentTransactionOutput[]>((acc, transaction) => acc.concat(createUnspentTransactionOutputs(transaction)), []);\r\n    // Gather all inputs on this block, so we can use them to unvalidate older outputs\r\n    const allInputsOnThisBlock = block.data.reduce<TransactionInput[]>((acc, transaction) => acc.concat(transaction.inputs), []);\r\n    // Invalidate outputs based on these new inputs\r\n    const remainingUnspentTransactions: UnspentTransactionOutput[] = [...unspentTransactions, ...newUnspentOutputs].filter(unspentTransaction => {\r\n      // Remove unspenttransaction if the current block references it as an input\r\n      if (allInputsOnThisBlock.find(input => input.transactionId === unspentTransaction.transactionId && input.transactionOutputIndex === unspentTransaction.index)) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n    return remainingUnspentTransactions\r\n  }, []);\r\n}\r\n\r\n/**\r\n * Get all unspent transactions of a single user\r\n */\r\nexport function unspentTransactionsOfAddress(chain: Chain<Transaction[]>, unconfirmedTransactions: Transaction[], address: string): UnspentTransactionOutput[] {\r\n  const allUnspentTransactions = calculateUnspentOutputs(chain, unconfirmedTransactions);\r\n  return allUnspentTransactions.filter(transaction => transaction.address === address);\r\n}\r\n\r\n/**\r\n * Get remaining coins of a single user\r\n */\r\nexport function balanceOfAddress(chain: Chain<Transaction[]>, unconfirmedTransactions: Transaction[], address: string): number {\r\n  const unspentTransactions = unspentTransactionsOfAddress(chain, unconfirmedTransactions, address);\r\n  return unspentTransactions.reduce((acc, transaction) => acc + transaction.amount, 0);\r\n}\r\n\r\n/**\r\n * Helper for creating an input from an unspent output\r\n */\r\nexport function createUnsignedInputFromUnspentOutput(output: UnspentTransactionOutput): TransactionInput {\r\n  return {\r\n    signature: '',\r\n    transactionId: output.transactionId,\r\n    transactionOutputIndex: output.index,\r\n  };\r\n}\r\n\r\n/**\r\n * Helper for creating a one way transaction output\r\n */\r\nexport function createOutputs(myPublicKey: string, receiverPublicKey: string, amount: number, leftoverAmount: number): TransactionOutput[] {\r\n  if (leftoverAmount > 0) {\r\n    return [{\r\n      address: receiverPublicKey,\r\n      amount\r\n    }, {\r\n      address: myPublicKey,\r\n      amount: leftoverAmount\r\n    }];\r\n  }\r\n\r\n  return [{\r\n    address: receiverPublicKey,\r\n    amount\r\n  }];\r\n}\r\n\r\n/**\r\n * Find the sender's address based on the inputs of the transaction\r\n */\r\nexport function getSenderAddress(transaction: Transaction, chain: Chain<Transaction[]>): string | null {\r\n  const sampleInput = transaction.inputs[0];\r\n  if (!sampleInput.transactionId) {\r\n    return null;\r\n  }\r\n  const outputTransactionBlock = chain.find(block => block.data.find(transaction => transaction.id === sampleInput.transactionId));\r\n  const outputTransaction = outputTransactionBlock?.data.find(transaction => transaction.id === sampleInput.transactionId);\r\n  const output = outputTransaction?.outputs[sampleInput.transactionOutputIndex];\r\n  return output?.address || null;\r\n}\r\n\r\n/**\r\n * Get all transactions an address was involved in\r\n */\r\nexport function getTransactionsOfAddress(chain: Chain<Transaction[]>, unconfirmedTransactions: Transaction[], address: string): Transaction[] {\r\n  const transactions = chain.reduce<Transaction[]>((acc, block) => acc.concat(block.data), []).concat(unconfirmedTransactions);\r\n  console.log(transactions);\r\n  return transactions.filter(transaction => {\r\n    return transaction.outputs.find(output => output.address === address) || getSenderAddress(transaction, chain) === address\r\n  });\r\n}","import { Card, CardContent, Divider, makeStyles, Typography } from '@material-ui/core';\r\nimport React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { getSenderAddress, Transaction } from '../../../src/transaction';\r\nimport { DataContext } from './DataProvider';\r\n\r\ntype Props = {\r\n  transaction: Transaction;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  hash: {\r\n    fontSize: 12\r\n  }\r\n});\r\n\r\nexport function shortAddress(hash: string): string {\r\n  return `${hash.substr(0, 8)}...${hash.substr(-8)}`;\r\n}\r\n\r\nexport default function TransactionComponent({ transaction }: Props) {\r\n  const classes = useStyles();\r\n  const { chain } = useContext(DataContext);\r\n\r\n  const sender = getSenderAddress(transaction, chain);\r\n\r\n  const senderDisplay = sender ? <Link to={`/wallet/${sender}`}>{shortAddress(sender)}</Link> : <strong>COINBASE</strong>\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardContent>\r\n          <Typography color=\"textSecondary\" className={classes.hash}>{transaction.id}</Typography>\r\n          <Typography>\r\n            {transaction.outputs.map((output, i) => (\r\n              <div key={i}>\r\n                {senderDisplay} &gt; <Link to={`/wallet/${output.address}`}>{shortAddress(output.address)}</Link> for <strong>{output.amount}</strong> coins\r\n              </div>\r\n            ))}\r\n          </Typography>\r\n          {transaction.message && (\r\n            <Typography>\r\n              Included message: \"{transaction.message}\"\r\n            </Typography>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n      <Divider />\r\n    </>\r\n  )\r\n}","import { makeStyles, Card, CardContent, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { Block } from '../../../src/block';\r\nimport { Transaction } from '../../../src/transaction';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport TransactionComponent from './Transaction';\r\n\r\ntype Props = {\r\n  block: Block<Transaction[]>;\r\n  index: number;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  hash: {\r\n    fontSize: 12\r\n  }\r\n});\r\n\r\nexport default function BlockComponent({ block, index }: Props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography component=\"h2\" variant=\"h6\" color=\"textSecondary\" gutterBottom>\r\n          Block {index}\r\n        </Typography>\r\n        <Typography color=\"textSecondary\" className={classes.hash}>\r\n          {block.hash}\r\n        </Typography>\r\n        <Typography color=\"textSecondary\" className={classes.hash} gutterBottom>\r\n          {new Date(block.timestamp).toLocaleString()}\r\n        </Typography>\r\n\r\n      </CardContent>\r\n        <Accordion>\r\n          <AccordionSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            aria-controls=\"panel1a-content\"\r\n            id=\"panel1a-header\"\r\n          >\r\n            <Typography color=\"textSecondary\">Transactions</Typography>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n              <Grid container spacing={1}>\r\n                {block.data.map(transaction => (\r\n                  <Grid item xs={12}>\r\n                    <TransactionComponent key={transaction.id} transaction={transaction} />\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n          </AccordionDetails>\r\n        </Accordion>\r\n\r\n    </Card>\r\n  )\r\n}","import { Grid } from \"@material-ui/core\";\r\nimport React, { useContext, useMemo } from \"react\";\r\nimport BlockComponent from \"./Block\";\r\nimport { DataContext } from \"./DataProvider\";\r\n\r\nexport default function BlockList() {\r\n  const { chain } = useContext(DataContext);\r\n\r\n  const reversedChain = useMemo(() => [...chain].reverse(), [chain]);\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      {reversedChain.map((block, i) => (\r\n        <Grid item lg={6}>\r\n          <BlockComponent block={block} key={block.hash} index={reversedChain.length - i} />\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  )\r\n}","import { Grid, makeStyles, Paper, Table, TableBody, TableCell, TableHead, TableRow, Typography } from \"@material-ui/core\";\r\nimport React, { useContext, useMemo } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { balanceOfAddress, getSenderAddress, getTransactionsOfAddress } from \"../../../src/transaction\";\r\nimport { DataContext } from \"./DataProvider\";\r\nimport { shortAddress } from \"./Transaction\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    wordBreak: 'break-all'\r\n  }\r\n}));\r\n\r\n\r\n\r\nexport default function Wallet() {\r\n  const { address } = useParams<{ address: string }>();\r\n  const { chain } = useContext(DataContext);\r\n  const classes = useStyles();\r\n  const balance = chain.length > 0 ? balanceOfAddress(chain, [], address) : null;\r\n  const transactions = useMemo(() => {\r\n    return getTransactionsOfAddress(chain, [], address).reverse();\r\n  }, [address, chain]);\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <Paper className={classes.paper}>\r\n            <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>Wallet {address}</Typography>\r\n            {balance !== null && <Typography component=\"h3\" variant=\"h6\" color=\"textSecondary\" gutterBottom>Balance: {balance}</Typography>}\r\n            <Table size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Incoming / Outgoing</TableCell>\r\n                  <TableCell>Address</TableCell>\r\n                  <TableCell align=\"right\">Amount</TableCell>\r\n                  <TableCell>Message</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {transactions.map((transaction) => {\r\n                  const isCoinbase = transaction.inputs.length === 1 &&\r\n                    transaction.outputs.length === 1 &&\r\n                    Number.isInteger(transaction.inputs[0].transactionOutputIndex) &&\r\n                    transaction.inputs[0].transactionId === '';\r\n                  const isSendingToYourself = !isCoinbase && !transaction.outputs.map(o => o.address).find(a => a !== address);\r\n                  if (isSendingToYourself) {\r\n                    return null;\r\n                  }\r\n                  const senderAddress = getSenderAddress(transaction, chain);\r\n                  const isOutgoing = senderAddress === address;\r\n                  const relevantOutput = isOutgoing ?\r\n                    transaction.outputs.find(output => output.address !== address) :\r\n                    transaction.outputs.find(output => output.address === address);\r\n                  const otherAddress = isOutgoing ? relevantOutput?.address : senderAddress;\r\n                  const otherAddressDisplay = otherAddress ? <Link to={`/wallet/${otherAddress}`}>{shortAddress(otherAddress)}</Link> : (isCoinbase ? 'COINBASE' : '-');\r\n                  return (\r\n                    <TableRow key={transaction.id}>\r\n                      <TableCell>{isOutgoing ? 'Outgoing' : 'Incoming'}</TableCell>\r\n                      <TableCell>{otherAddressDisplay}</TableCell>\r\n                      <TableCell align=\"right\">{otherAddress ? relevantOutput?.amount : transaction.outputs[0].amount}</TableCell>\r\n                      <TableCell>{transaction.message}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  )\r\n}","import { Grid, makeStyles, Paper, TextField, Typography } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    wordBreak: 'break-all'\r\n  }\r\n}));\r\n\r\n\r\nexport default function MyWallet() {\r\n  const classes = useStyles();\r\n  const [publicKey, setPublicKey] = useState(localStorage.getItem('publicKey') || '');\r\n  const [secret, setSecret] = useState(localStorage.getItem('secret') || '');\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('publicKey', publicKey);\r\n    localStorage.setItem('secret', secret);\r\n  }, [publicKey, secret]);\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Grid item xs={12}>\r\n        <Paper className={classes.paper}>\r\n          <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>My Wallet</Typography>\r\n          <Typography component=\"h3\" variant=\"h6\" color=\"textSecondary\" gutterBottom>Set your wallet details</Typography>\r\n          <TextField label=\"Public key\" variant=\"outlined\" value={publicKey} onChange={(event: React.ChangeEvent<HTMLInputElement>) => setPublicKey(event.target.value)} margin=\"normal\" />\r\n          <TextField label=\"Secret key\" variant=\"outlined\" value={secret} onChange={(event: React.ChangeEvent<HTMLInputElement>) => setSecret(event.target.value)} margin=\"normal\" />\r\n          {publicKey && <Link to={`/wallet/${publicKey}`}>Go to wallet</Link>}\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/miner.worker.5e018612.worker.js\");\n}\n","import { FormControl, Grid, InputLabel, makeStyles, MenuItem, Paper, Select, Typography } from \"@material-ui/core\";\nimport React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from \"react\";\nimport { post } from \"../utils/getJson\";\nimport { Block, createBlock, getDifficultyForNextBlock } from \"../../../src/block\";\nimport { createCoinbaseTransaction, Transaction } from \"../../../src/transaction\";\nimport { DataContext } from \"./DataProvider\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport Miner from 'worker-loader!./miner.worker';\nimport { WorkerEvent } from \"./miner.worker\";\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    wordBreak: 'break-all'\n  },\n  text: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  select: {\n    marginLeft: '1em'\n  }\n}));\n\nexport default function BlockList() {\n  const { chain, unconfirmedTransactions } = useContext(DataContext);\n  const classes = useStyles();\n  const publicKey = localStorage.getItem('publicKey');\n  const secretKey = localStorage.getItem('secret');\n  const [hashCount, setHashCount] = useState(0);\n  const [block, setBlock] = useState<Block<Transaction[]> | null>(null);\n  const [solutions, setSolutions] = useState(0);\n  const [cores, setCores] = useState(1);\n  const workers = useRef<Worker[] | null>(null);\n  const progressInfo = useRef<Array<{ timestamp: number; count: number; }>>([]);\n\n  const data = useMemo(() => {\n    if (!unconfirmedTransactions || chain.length === 0 || !secretKey || !publicKey) {\n      return null;\n    }\n    const coinbaseTransaction = createCoinbaseTransaction(chain.length, publicKey, secretKey);\n    const unminedBlock = createBlock([coinbaseTransaction, ...unconfirmedTransactions], chain[chain.length - 1].hash);\n    const difficulty = getDifficultyForNextBlock(chain);\n\n    return {\n      chain,\n      unconfirmedTransactions,\n      coinbaseTransaction,\n      unminedBlock,\n      difficulty\n    }\n  }, [chain, unconfirmedTransactions, publicKey, secretKey]);\n\n  /**\n   * Update internal values / get the mined block when events are sent from workers\n   */\n  const onWorkerEvent = useCallback((event: MessageEvent<WorkerEvent>) => {\n    const workerEvent = event.data;\n    if (workerEvent.type === 'count') {\n      setHashCount(count => count + workerEvent.count);\n    } else if (workerEvent.type === 'solution') {\n      console.log(workerEvent.block)\n      setBlock(workerEvent.block);\n    }\n  }, []);\n\n  /**\n   * Setup / reset miners when new data is available\n   */\n  useEffect(() => {\n    if (data?.unminedBlock && data?.difficulty && !block) {\n      const newWorkers = []\n      for (let i = 0; i < cores; i++) {\n        const miner = new Miner();\n        miner.postMessage({\n          unminedBlock: data.unminedBlock,\n          difficulty: data.difficulty\n        });\n        miner.onmessage = onWorkerEvent;\n        newWorkers.push(miner);\n      }\n      workers.current = newWorkers;\n    }\n    return () => {\n      if (workers.current) {\n        console.log('terminating all workers');\n        workers.current.forEach(worker => worker.terminate());\n      }\n    }\n  }, [data, onWorkerEvent, block, cores]);\n\n  /**\n   * Send a mined block when ready to the server and reset state\n   */\n  useEffect(() => {\n    if (block) {\n      post('/mine-block', block).then((res) => {\n        if (res === 'success') {\n          setSolutions(solutions => solutions + 1);\n        }\n        setHashCount(0);\n        setBlock(null);\n        progressInfo.current = []\n      })\n      .catch(err => {\n        console.log(err);\n        setHashCount(0);\n        setBlock(null);\n        progressInfo.current = []\n      });\n    }\n  }, [block]);\n\n  const handleCoresChange = useCallback((event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>) => {\n    setCores(event.target.value as number);\n  }, [])\n\n  /**\n   * Update the progressinfo array with the latest count, so we can calculate a rolling average of hashes / s\n   */\n  useEffect(() => {\n    progressInfo.current = [...progressInfo.current, { timestamp: Date.now(), count: hashCount }];\n    if (progressInfo.current.length > 200) {\n      progressInfo.current = progressInfo.current.slice(-200);\n    }\n  }, [hashCount]);\n\n  if (!unconfirmedTransactions) {\n    return <>Loading...</>\n  }\n\n  if (!secretKey || !publicKey) {\n    return <>Please specify your public and secret keys in your Wallet</>;\n  }\n\n  /**\n   * Calculate a rolling average of the hashrate\n   */\n  const hashRate = progressInfo.current.length >= 2 ?\n    (progressInfo.current[progressInfo.current.length - 1].count - progressInfo.current[0].count) / ((progressInfo.current[progressInfo.current.length - 1].timestamp - progressInfo.current[0].timestamp) / 1000) :\n    null;\n\n  return (\n    <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>Mine block</Typography>\n            <Typography component=\"h3\" variant=\"h6\" color=\"textSecondary\" gutterBottom>Block will include {unconfirmedTransactions.length} transactions</Typography>\n            {data?.difficulty && <Typography component=\"h3\" variant=\"h6\" color=\"textSecondary\" gutterBottom>Difficulty: {data.difficulty}</Typography>}\n            <Typography component=\"h3\" variant=\"h6\" color=\"textSecondary\" gutterBottom className={classes.text}>Number of cores used <FormControl variant=\"outlined\">\n              <Select\n                labelId=\"demo-simple-select-error-label\"\n                id=\"demo-simple-select-error\"\n                value={cores}\n                onChange={handleCoresChange}\n                className={classes.select}\n              >\n                {(new Array(navigator.hardwareConcurrency).fill(true).map((_, i) => i+1)).map(item => {\n                  return <MenuItem value={item} key={item}>{item}</MenuItem>\n                })}\n              </Select>\n            </FormControl></Typography>\n\n            {hashCount > 0 && <Typography component=\"h3\" variant=\"h6\" color=\"textSecondary\" gutterBottom>Mining in progress, tries: {hashCount}, hash rate: {hashRate && Math.floor(hashRate / 1000)} khashes/s</Typography>}\n            {solutions > 0 && <Typography component=\"h3\" variant=\"h6\" color=\"textSecondary\" gutterBottom>Solutions: {solutions}</Typography>}\n          </Paper>\n        </Grid>\n    </Grid>\n  )\n}","import React from 'react';\r\nimport DataProvider from './components/DataProvider';\r\nimport Layout from './components/Layout';\r\nimport { HashRouter, Switch, Route } from 'react-router-dom';\r\nimport BlockList from './components/BlockList';\r\nimport Wallet from './components/Wallet';\r\nimport MyWallet from './components/MyWallet';\r\nimport Mine from './components/Mine';\r\n\r\nexport default function App() {\r\n\r\n  return (\r\n    <DataProvider>\r\n      <HashRouter>\r\n        <Layout>\r\n            <Switch>\r\n              <Route path=\"/chain-explorer\">\r\n                <BlockList />\r\n              </Route>\r\n              <Route path=\"/wallet\" exact>\r\n                <MyWallet />\r\n              </Route>\r\n              <Route path=\"/wallet/:address\">\r\n                <Wallet />\r\n              </Route>\r\n              <Route path=\"/mine\">\r\n                <Mine />\r\n              </Route>\r\n            </Switch>\r\n        </Layout>\r\n      </HashRouter>\r\n    </DataProvider>\r\n  )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render((\r\n  <App />\r\n), document.getElementById('root'));\r\n"],"sourceRoot":""}