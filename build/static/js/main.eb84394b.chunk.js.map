{"version":3,"sources":["client/src/utils/getJson.ts","client/src/components/DataProvider.tsx","client/src/components/Layout.tsx","src/util.ts","src/block.ts","src/transaction.ts","client/src/components/Transaction.tsx","client/src/components/Block.tsx","client/src/components/BlockList.tsx","client/src/components/Wallet.tsx","client/src/components/MyWallet.tsx","client/src/components/miner.worker.ts","client/src/components/Mine.tsx","client/src/components/CreateTransaction.tsx","client/src/App.tsx","client/src/index.tsx"],"names":["ROOT","getJson","path","fetch","mode","credentials","then","response","json","data","catch","err","console","error","post","body","method","JSON","stringify","headers","res","DataContext","createContext","chain","unconfirmedTransactions","DataProvider","children","useState","setChain","setUnconfirmedTransactions","fetchChain","useCallback","fetchUnconfirmedTransactions","fetchAllData","useEffect","setInterval","value","useMemo","Provider","useStyles","makeStyles","theme","root","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","spacing","breakpoints","up","appBarSpacer","content","height","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","Layout","classes","React","open","setOpen","history","useHistory","className","CssBaseline","AppBar","clsx","Toolbar","IconButton","edge","color","aria-label","onClick","Typography","component","variant","noWrap","Drawer","Divider","List","ListItem","button","push","ListItemIcon","ListItemText","primary","Container","maxWidth","Grid","crypto","require","getHash","hash","createHash","update","digest","getHashBase","dataSerializer","previousHash","timestamp","nonce","calculateBlockHash","block","updateHash","createBlock","Date","now","getDifficultyForNextBlockFromTimestamps","timestamps","length","chunkLength","getNextChunk","remainingArray","collectedArrays","slice","reduce","difficulty","currentChunk","averageMiningTime","arr","averageDifference","DIFFICULTY_EXPECTED_MINING_TIME","Math","min","max","ec","ecdsa","transactionSerializer","transaction","inputs","map","input","signature","transactionId","transactionOutputIndex","join","outputs","output","address","amount","id","message","generateTransactionID","signTransactionInputs","secretKey","key","keyFromPrivate","byteArray","sign","toDER","Array","from","byte","toString","createTransactionForAmount","myPublicKey","targetPublicKey","myUnspentTransactionOutputs","requestedAmount","currentAmount","includedOutputs","i","leftoverAmount","Error","findUnspentOutputsForAmount","unspentTransactionsOfAddress","index","createUnsignedInputFromUnspentOutput","createOutputs","createCoinbaseTransaction","blockHeight","publicKey","createTransaction","unspentTransactions","newUnspentOutputs","acc","concat","createUnspentTransactionOutputs","allInputsOnThisBlock","filter","unspentTransaction","find","calculateUnspentOutputs","receiverPublicKey","getSenderAddress","sampleInput","outputTransactionBlock","outputTransaction","fontSize","shortAddress","substr","TransactionComponent","sender","useContext","senderDisplay","to","Card","CardContent","difficultyRegex","BlockComponent","exec","gutterBottom","toLocaleString","Accordion","AccordionSummary","expandIcon","aria-controls","AccordionDetails","item","xs","BlockList","reversedChain","reverse","lg","wordBreak","Wallet","useParams","balance","balanceOfAddress","transactions","log","getTransactionsOfAddress","Paper","Table","size","TableHead","TableRow","TableCell","align","TableBody","isCoinbase","Number","isInteger","o","a","senderAddress","isOutgoing","relevantOutput","otherAddress","otherAddressDisplay","MyWallet","localStorage","getItem","setPublicKey","secret","setSecret","setItem","TextField","label","onChange","event","target","margin","Worker_fn","Worker","text","select","hashCount","setHashCount","setBlock","solutions","setSolutions","cores","setCores","workers","useRef","progressInfo","coinbaseTransaction","unminedBlock","getDifficultyForNextBlock","onWorkerEvent","workerEvent","type","count","newWorkers","miner","Miner","postMessage","onmessage","current","forEach","worker","terminate","handleCoresChange","hashRate","FormControl","Select","labelId","navigator","hardwareConcurrency","fill","_","MenuItem","floor","CreateTransaction","recipient","setData","handleRecipientChange","handleAmountChange","parseInt","signTransaction","send","Button","disabled","App","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb84394b.chunk.js","sourcesContent":["const ROOT = 'http://hyggecoin.herokuapp.com';\n\nexport default function getJson<T>(path: string): Promise<T> {\n  return fetch(ROOT + path, {\n    mode: 'cors',\n    credentials: 'omit'\n  })\n    .then(response => response.json())\n    .then(response => (response.data))\n    .catch(err => console.error(err));\n}\n\nexport function post(path: string, body: any) {\n  return fetch(ROOT + path, {\n    method: 'POST',\n    body: JSON.stringify(body),\n    mode: 'cors',\n    credentials: 'omit',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n  .then(res => res.json())\n  .then(res => res.data)\n}","import React, { createContext, useCallback, useEffect, useMemo, useState } from \"react\";\nimport getJson from \"../utils/getJson\";\nimport { Chain } from \"../../../src/block\";\nimport { Transaction } from \"../../../src/transaction\";\n\nconst DataContext = createContext<{\n  chain: Chain<Transaction[]>,\n  unconfirmedTransactions: Transaction[] | null\n}>({\n  chain: [],\n  unconfirmedTransactions: null\n});\n\nexport default function DataProvider({ children }: { children: React.ReactElement}): React.ReactElement {\n\n  const [chain, setChain] = useState<Chain<Transaction[]>>([]);\n  const [unconfirmedTransactions, setUnconfirmedTransactions] = useState<Transaction[] | null>(null);\n\n  const fetchChain = useCallback(() => {\n    getJson<Chain<Transaction[]>>('/chain').then(data => setChain(data));\n  }, []);\n\n  const fetchUnconfirmedTransactions = useCallback(() => {\n    getJson<Transaction[]>('/unconfirmed-transactions').then(data => setUnconfirmedTransactions(data));\n  }, []);\n\n  const fetchAllData = useCallback(() => {\n    fetchChain()\n    fetchUnconfirmedTransactions();\n  }, [fetchChain, fetchUnconfirmedTransactions]);\n\n  useEffect(() => {\n    fetchAllData();\n    setInterval(fetchAllData, 20 * 1000);\n  }, [fetchAllData]);\n\n  const value = useMemo(() => ({\n    chain,\n    unconfirmedTransactions\n  }), [chain, unconfirmedTransactions])\n\n  return (\n    <DataContext.Provider value={value}>\n      {children}\n    </DataContext.Provider>\n  );\n}\n\nexport {\n  DataContext\n};","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport WalletIcon from '@material-ui/icons/AccountBalanceWallet';\nimport MemoryIcon from '@material-ui/icons/Memory';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport SwapHorizIcon from '@material-ui/icons/SwapHoriz';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { useHistory } from 'react-router';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto',\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\n\nexport default function Layout({ children }: { children: React.ReactElement }) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const history = useHistory();\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            Hyggecoin\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <div>\n            <ListItem button onClick={() => history.push(\"/chain-explorer\")}>\n              <ListItemIcon>\n                <DashboardIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Chain Explorer\" />\n            </ListItem>\n            <ListItem button onClick={() => history.push(\"/wallet\")}>\n              <ListItemIcon>\n                <WalletIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"My Wallet\" />\n            </ListItem>\n            <ListItem button onClick={() => history.push(\"/create-transaction\")}>\n              <ListItemIcon>\n                <SwapHorizIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Create Transaction\" />\n            </ListItem>\n            <ListItem button onClick={() => history.push(\"/mine\")}>\n              <ListItemIcon>\n                <MemoryIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Mine Coins\" />\n            </ListItem>\n          </div>\n        </List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Grid container spacing={3}>\n            {children}\n          </Grid>\n        </Container>\n      </main>\n    </div>\n  );\n}","const crypto = require('crypto');\n\nexport function getHash(content: string): string {\n  const hash = crypto.createHash('sha256');\n  hash.update(content);\n  return hash.digest('hex');\n}\n\nexport function toHexString(byteArray: any[]): string {\n  return Array.from(byteArray, (byte: any) => {\n      return ('0' + (byte & 0xFF).toString(16)).slice(-2);\n  }).join('');\n};\n\n/**\n * Split an array into arrays of a fixed length\n * Leftover items are included in the last array of fewer than the given length items\n */\nexport function chunk<T>(arr: T[], chunkLength: number): T[][] {\n  function getNextChunk(remainingArray: T[], collectedArrays: T[][]): T[][] {\n    if (remainingArray.length < chunkLength) {\n      return [...collectedArrays, remainingArray]\n    }\n    return getNextChunk(remainingArray.slice(chunkLength), [...collectedArrays, remainingArray.slice(0, chunkLength)]);\n  }\n  return getNextChunk(arr, []);\n}\n\n/**\n * The average of the difference between items in an array\n */\nexport function averageDifference(arr: number[]): number {\n  return (arr[arr.length - 1] - arr[0]) / (arr.length - 1);\n}","import { averageDifference, chunk, getHash } from \"./util\";\n\n/**\n * A single block in a blockchain\n */\nexport type Block<T> = {\n  /**\n   * Reference to the previous block. Since the blockchain is basically a linked list, this is how we know they string together.\n   * Also included in the current block's hash, so that the chain can't be altered without altering all the rest of it\n   */\n  previousHash: string;\n  /**\n   * Computed from the data, timestamp, previous block's hash and nonce. Any of those change, and the hash changes.\n   */\n  hash: string;\n  /**\n   * Time of block creation\n   */\n  timestamp: number;\n  /**\n   * Arbitrary data. In a cryptocurrency, this will hold the transactions encoded in the block\n   */\n  data: T;\n  /**\n   * A random number included at the end of the content for hash calculation, that resulted in the block passing the difficulty test\n   */\n  nonce: number\n}\n\n/**\n * A linked list of blocks\n */\nexport type Chain<T> = Block<T>[];\n\n/**\n * Get the string from a block the hash is calculated from\n */\nexport function getHashBase<T>({\n  previousHash,\n  timestamp,\n  data,\n  nonce\n}: Block<T>, dataSerializer: (data: T) => string): string {\n  return previousHash + timestamp + dataSerializer(data) + nonce;\n}\n\n/**\n * Calculate a block's hash based on all its other information, ensuring that you can't change the contents of the block without the hash changing\n * Uses sha256\n */\nexport function calculateBlockHash<T>(block: Block<T>, dataSerializer: (data: T) => string): string {\n  return getHash(getHashBase(block, dataSerializer));\n}\n\n/**\n * Update a block with its calculated hash and return the resulting block.\n * When you create a block, you should leave the hash empty and call this function.\n */\nexport function updateHash<T>(block: Block<T>, dataSerializer: (data: T) => string): Block<T> {\n  return { ...block, hash: calculateBlockHash(block, dataSerializer) };\n}\n\n/**\n * Update the block with a new once and corresponding hash, and return the resulting block\n */\nexport function nextNonce<T>(block: Block<T>, dataSerializer: (data: T) => string): Block<T> {\n  return updateHash({ ...block, nonce: block.nonce + 1 }, dataSerializer)\n}\n\n/**\n * Check whether a sha256 hash matches a given difficulty, meaning whether it starts with difficulty number of 0s\n */\nexport function checkDifficulty(difficulty: number, hash: string): boolean {\n  return hash.substr(0, difficulty) === \"0\".repeat(difficulty)\n}\n\n/**\n * Change the nonce property of a block until the resulting hash passes the given difficulty\n */\nexport function mineBlock<T>(difficulty: number, block: Block<T>, dataSerializer: (data: T) => string) {\n  let finishedBlock = block;\n  while (!checkDifficulty(difficulty, finishedBlock.hash)) {\n    finishedBlock = nextNonce(finishedBlock, dataSerializer);\n    console.log(finishedBlock.nonce, finishedBlock.hash);\n  }\n  return finishedBlock;\n}\n\n/**\n * Helper for creating a block with a calculated hash\n */\nexport function createBlock<T>(data: T, previousHash: string, dataSerializer: (data: T) => string): Block<T> {\n  return updateHash({\n    timestamp: Date.now(),\n    data,\n    previousHash,\n    hash: '',\n    nonce: 0\n  }, dataSerializer);\n}\n\n/**\n * Validates a chain, ensuring that all blocks' hash are correct and they chain together\n */\nexport function validateChain<T>(chain: Chain<T>, dataSerializer: (data: T) => string) {\n  return chain.map((block, i) => {\n    // Genesis block is always valid\n    if (i === 0) {\n      return true;\n    }\n    // Validate the block\n    if (block.hash !== calculateBlockHash(block, dataSerializer)) {\n      console.log(getHashBase(block, dataSerializer));\n    }\n    return (\n      block.hash === calculateBlockHash(block, dataSerializer) && // block hash checks out\n      block.previousHash === chain[i -1].hash // previousHash is the save as previous block's hash\n    );\n  }).filter(isValid => !isValid).length === 0;\n}\n\n/**\n * The number of blocks after which we recheck the difficulty\n */\nexport const DIFFICULTY_CHECK_INTERVAL = 10;\n\nexport const MINUTE = 1000 * 60;\nexport const HOUR = 60 * MINUTE;\n\n/**\n * Expected time for a block to be mined\n */\nexport const DIFFICULTY_EXPECTED_MINING_TIME = 20 * MINUTE;\n\n/**\n * If the average mining time was lower or larger by this amount than the expected, don't update the difficulty\n */\nexport const DIFFICULTY_ALLOWED_DIFFERENCE_MULTIPLIER = 0.2;\n\n/**\n * The starting difficulty for an empty chain\n */\nexport const DIFFICULTY_STARTING = 6;\n\nexport const DIFFICULTY_MIN = 5;\nexport const DIFFICULTY_MAX = 15;\n\n/**\n * A timeperiod after which the difficulty to mine will be the minimum difficulty\n */\nexport const DIFFICULTY_INACTIVITY_PERIOD = 3 * DIFFICULTY_EXPECTED_MINING_TIME;\n\n/**\n * Gets required difficulty at the end of a given timestamp array. For testability purposes\n */\nexport function getDifficultyForNextBlockFromTimestamps(timestamps: number[], now: number): number {\n  if (now > timestamps[timestamps.length - 1] + DIFFICULTY_INACTIVITY_PERIOD) {\n    return DIFFICULTY_MIN;\n  }\n  // Split the array into equal length chunks\n  const chunks = chunk(timestamps, DIFFICULTY_CHECK_INTERVAL);\n  return chunks.reduce<number>((difficulty, currentChunk) => {\n    // Only change difficulty for full chunks - ignore the last, incomplete chunk\n    if (currentChunk.length < DIFFICULTY_CHECK_INTERVAL) {\n      return difficulty;\n    }\n    // Calculate averate mining time\n    const averageMiningTime = averageDifference(currentChunk);\n    if (averageMiningTime > DIFFICULTY_EXPECTED_MINING_TIME * (1 + DIFFICULTY_ALLOWED_DIFFERENCE_MULTIPLIER)) {\n      return Math.min(difficulty - 1, DIFFICULTY_MAX);\n    }\n\n    if (averageMiningTime < DIFFICULTY_EXPECTED_MINING_TIME * (1 - DIFFICULTY_ALLOWED_DIFFERENCE_MULTIPLIER)) {\n      return Math.max(difficulty + 1, DIFFICULTY_MIN);\n    }\n\n    return difficulty;\n  }, DIFFICULTY_STARTING);\n}\n\n/**\n * Gets the required difficulty at the end of a given chain\n */\nexport function getDifficultyForNextBlock<T>(chain: Block<T>[]): number {\n  return getDifficultyForNextBlockFromTimestamps(chain.map(block => block.timestamp), Date.now());\n}","import { getHash, toHexString } from \"./util\";\nimport * as ecdsa from 'elliptic';\nimport { Chain, createBlock } from \"./block\";\n\nconst ec = new ecdsa.ec('secp256k1');\n\n/**\n * Amount of coins rewarded for the miner of the block\n */\nexport const REWARD_AMOUNT = 10;\n\n/**\n * Max characters length of the transaction message\n */\nexport const TRANSACTION_MESSAGE_MAX_LENGTH = 130;\n\nexport type TransactionOutput = {\n  /**\n   * This is the public key of the user the number of coins are sent to\n   */\n  address: string;\n  /**\n   * Number of coins to send\n   */\n  amount: number;\n}\n\n/**\n * This is a utility type to hold information needed when handling unspent transaction outputs. Otherwise the entire transaction would need to be passed around.\n */\nexport type UnspentTransactionOutput = {\n  /**\n   * Id of the transaction this output belongs to\n   */\n  transactionId: string;\n  /**\n   * Index of the output inside the transaction outputs. Needed because one transaction can have multiple outputs, and we need to find the corresponding output when we verify\n   */\n  index: number;\n  /**\n   * Public key of recipient. Copied from the output directly.\n   */\n  address: string;\n  /**\n   * Amount of coins sent. Copied from the output directly.\n   */\n  amount: number;\n}\n\nexport type TransactionInput = {\n\n  /**\n   * The sender must sign this input with their private key\n   * Q: why is not the whole transaction signed instead of the individual inputs, since we use the transaction id as the content for the signature anyway?\n   */\n  signature: string;\n  /**\n   * The id of the transaction that holds the unspent output this input is referencing.\n   */\n  transactionId: string;\n  /**\n   * Since one transaction can have a number of outputs, we need to know the index of the output inside that transaction this input is referencing\n   */\n  transactionOutputIndex: number;\n}\n\nexport type Transaction = {\n  /**\n   * Derived from all other fields of the transaction, excluding signatures. When the data changes, the id should change.\n   */\n  id: string;\n  /**\n   * References to unspent outputs belonging to the user\n   */\n  inputs: TransactionInput[];\n  /**\n   * All outputs must add up to the total value of all inputs. If there is some leftover, an output should be added that sends the leftover back to the sender.\n   */\n  outputs: TransactionOutput[];\n  /**\n   * Optional message to be included with the transaction\n   */\n  message: string;\n}\n\n/**\n * Serialize a transaction, so that the hash function always works with the same input\n */\nexport function transactionSerializer(transaction: Transaction): string {\n  const inputs = transaction.inputs.map(input => input.signature + input.transactionId + input.transactionOutputIndex).join(',');\n  const outputs = transaction.outputs.map(output => output.address + output.amount).join(',');\n  return transaction.id + inputs + outputs + transaction.message;\n}\n\n/**\n * Data serializer for this cryptocurrency\n */\nexport function dataSerializer(data: Transaction[]): string {\n  return data.map(transactionSerializer).join(';');\n}\n\n/**\n * Generate a has from the transaction's inputs and outputs to use as the id of the transaction\n */\nexport function generateTransactionID(transaction: Transaction): string {\n  const content = transaction.inputs.map(input => input.transactionId + input.transactionOutputIndex).join('') +\n    transaction.outputs.map(output => output.address + output.amount).join('') +\n    (transaction.message || '');\n  return getHash(content);\n}\n\n/**\n * Using your private key, sign a transaction's inputs\n */\nexport function signTransactionInputs(transaction: Transaction, secretKey: string): Transaction {\n  const key = ec.keyFromPrivate(secretKey, 'hex');\n  return ({\n    ...transaction,\n    inputs: transaction.inputs.map(input => {\n      return {\n        ...input,\n        signature: toHexString(key.sign(transaction.id).toDER())\n      };\n    })\n  })\n}\n\n/**\n * Using your private key, sign a transaction's inputs and generate its id\n */\nexport function signTransaction(transaction: Transaction, secretKey: string): Transaction {\n  return signTransactionInputs({\n    ...transaction,\n    id: generateTransactionID(transaction)\n  }, secretKey);\n}\n\n/**\n * For a given address, searches the wallet's unspent transaction outputs until it finds enough to fulfill a requestesd amount\n */\nexport function findUnspentOutputsForAmount(myUnspentTransactionOutputs: UnspentTransactionOutput[], requestedAmount: number): { includedOutputs: UnspentTransactionOutput[], leftoverAmount: number } {\n  let currentAmount = 0;\n  const includedOutputs = [];\n  for (let i = 0; i < myUnspentTransactionOutputs.length; i++) {\n    currentAmount += myUnspentTransactionOutputs[i].amount;\n    includedOutputs.push(myUnspentTransactionOutputs[i]);\n    if (currentAmount >= requestedAmount) {\n      return {\n        includedOutputs,\n        leftoverAmount: currentAmount - requestedAmount\n      };\n    }\n  }\n  throw new Error('Requested more outputs than available coins');\n}\n\n/**\n * Create an unsigned transaction from start to finish from one address to another\n */\nexport function createTransactionForAmount(chain: Chain<Transaction[]>, unconfirmedTransactions: Transaction[], myPublicKey: string, targetPublicKey: string, message: string, amount: number): Transaction {\n  const myUnspentTransactionOutputs = unspentTransactionsOfAddress(chain, unconfirmedTransactions, myPublicKey);\n    const { includedOutputs, leftoverAmount } = findUnspentOutputsForAmount(myUnspentTransactionOutputs, amount);\n    return {\n      id: '',\n      inputs: includedOutputs.map(output => createUnsignedInputFromUnspentOutput(output)),\n      outputs: createOutputs(myPublicKey, targetPublicKey, amount, leftoverAmount),\n      message\n    }\n}\n\n/**\n * Helper for creating a transaction with calculated id, and signed\n */\nexport function createTransaction(inputs: TransactionInput[], outputs: TransactionOutput[], message: string, secretKey: string): Transaction {\n  let transaction = {\n    id: '',\n    inputs,\n    message,\n    outputs\n  };\n  transaction = {\n    ...transaction,\n    id: generateTransactionID(transaction)\n  };\n  return signTransactionInputs(transaction, secretKey);\n}\n\n/**\n * Helper for creating a coinbase transaction\n */\nexport function createCoinbaseTransaction(blockHeight: number, publicKey: string, secretKey: string): Transaction {\n  return createTransaction([{\n    signature: '',\n    transactionId: '',\n    transactionOutputIndex: blockHeight\n  }], [{\n    address: publicKey,\n    amount: blockHeight === 1 ? 500 : REWARD_AMOUNT\n  }], 'Coinbase transaction', secretKey);\n}\n\n/**\n * Validate transaction outputs\n */\nexport function validateOutput(output: TransactionOutput): Error | null {\n\n  // Validate output address\n  if (typeof output.address !== 'string') {\n    throw new Error('Output address needs to be a valid address');\n  }\n\n  // Validate that no outputs are for 0 amount\n  if (output.amount === 0) {\n    throw new Error('Can\\'t create output for 0');\n  }\n\n  // Validate that no outputs are for negative amount\n  if (output.amount < 0) {\n    throw new Error('Can\\'t create output for negative amount');\n  }\n\n  // Validate that no outputs are for more than javascript's safe integer\n  if (output.amount > Number.MAX_SAFE_INTEGER) {\n    throw new Error(`Can\\'t create output for more than ${Number.MAX_SAFE_INTEGER}`);\n  }\n\n  // Validate that no fraction outputs have a greater precision than allowed\n  if (!Number.isInteger(output.amount)) {\n    throw new Error(`Only whole coins can be sent`);\n  }\n\n  return null;\n}\n\n/**\n * Determines whether a transaction is valid or not, checking id and that the inputs are valid, and that inputs equal outputs\n */\nexport function validateTransaction(transaction: Transaction, myUnspentTransactionOutputs: UnspentTransactionOutput[], unconfirmedTransactions: Transaction[]): boolean {\n  // Validate id\n  if (generateTransactionID(transaction) !== transaction.id) {\n    throw new Error('Transaction ID incorrect');\n  }\n\n  // Validate that the transaction doesn't reference an input that has already been referenced by another unconfirmed transaction\n  const allExistingInputs = unconfirmedTransactions.reduce<TransactionInput[]>((arr, transaction) => [...arr, ...transaction.inputs], []);\n  const referencesLockedTransaction = transaction.inputs.find(newInput => allExistingInputs.find(existingInput => existingInput.transactionId === newInput.transactionId && existingInput.transactionOutputIndex == newInput.transactionOutputIndex));\n  if (referencesLockedTransaction) {\n    throw new Error('Transaction references an output already used by another unconfirmed transaction');\n  }\n\n  // Validate that all inputs are unspent and belong to the user\n  const allInputsValid = transaction.inputs.map(input => {\n    const referencedOutput = myUnspentTransactionOutputs.find(unspentOutput => unspentOutput.transactionId === input.transactionId && unspentOutput.index === input.transactionOutputIndex);\n    if (!referencedOutput) {\n      console.error('Referenced output doesn\\'t exist');\n      return false;\n    }\n    const address = referencedOutput.address;\n    const key = ec.keyFromPublic(address, 'hex');\n    return key.verify(transaction.id, input.signature);\n  }).filter(Boolean).length === transaction.inputs.length;\n\n  if (!allInputsValid) {\n    throw new Error('Not all inputs are valid for transaction.')\n  }\n\n  // Check that all inputs equal outputs\n  const inputValue = transaction.inputs.reduce((acc, input) => {\n    const referencedOutput = myUnspentTransactionOutputs.find(unspentOutput => unspentOutput.transactionId === input.transactionId && unspentOutput.index === input.transactionOutputIndex);\n    if (!referencedOutput) {\n      return 0;\n    }\n    return acc + referencedOutput.amount;\n  }, 0);\n  const outputValue = transaction.outputs.reduce((acc, output) => acc + output.amount, 0);\n  if (inputValue !== outputValue) {\n    throw new Error('Input and output values do not match in transaction.');\n  }\n\n  // Validate outputs\n  transaction.outputs.forEach(output => validateOutput(output));\n\n  // Validate that the transaction message is valid type\n  if (typeof transaction.message !== 'string') {\n    throw new Error('Invalid message type');\n  }\n\n  // Validate that the transaction message is valid if exists\n  if (transaction.message.length > TRANSACTION_MESSAGE_MAX_LENGTH) {\n    throw new Error(`Message exceeds ${TRANSACTION_MESSAGE_MAX_LENGTH} chacracters`);\n  }\n\n  return true;\n}\n\n/**\n * Coinbase transactions are always the first transactions in a block, and they reward the miner of the block with REWARD_AMOUNT\n * Checking its validity is different. The input's index is the block's index.\n * Q: Why does this have to have any inputs anyway? Maybe because the need to sign it? Would someone be able to steal an output otherwise?\n * Right now I'm just going to ignore the input and only have an output, before I understand this.\n */\nexport function validateCoinbaseTransaction(transaction: Transaction, blockHeight: number) {\n  // Validate id\n  const generatedId = generateTransactionID(transaction);\n  if (generatedId !== transaction.id) {\n    throw new Error('Transaction ID incorrect.')\n  }\n\n  if (transaction.inputs.length !== 1) {\n    throw new Error('Coinbase transaction can only have one input.');\n  }\n\n  if (transaction.inputs[0].transactionOutputIndex !== blockHeight) {\n    throw new Error('Coinbase transaction\\'s input must contain blockHeight as the output index.');\n  }\n\n  if (transaction.outputs.length !== 1) {\n    throw new Error('Coinbase transaction can only have one output.');\n  }\n\n  const correctRewardAmount = blockHeight === 1 ? 500 : REWARD_AMOUNT;\n\n  if (transaction.outputs[0].amount !== correctRewardAmount) {\n    throw new Error('Coinbase transaction value must be for ' + correctRewardAmount);\n  }\n\n  if (transaction.message !== 'Coinbase transaction') {\n    throw new Error('Coinbase transaction can\\'t include a custom message');\n  }\n\n  return true;\n}\n\n/**\n * Helper for converting a transaction's outputs into unspent transactions\n */\nexport function createUnspentTransactionOutputs(transaction: Transaction): UnspentTransactionOutput[] {\n  return transaction.outputs.map((output, index) => ({\n    transactionId: transaction.id,\n    index,\n    address: output.address,\n    amount: output.amount\n  }));\n}\n\n/**\n * Calculate all unspent transactions at the end of a blockchain, regardless of target address\n */\nexport function calculateUnspentOutputs(chain: Chain<Transaction[]>, unconfirmedTransactions: Transaction[]): UnspentTransactionOutput[] {\n  const chainWithUnconfirmed = [...chain, createBlock(unconfirmedTransactions, chain[chain.length - 1].hash, dataSerializer)];\n  // TODO: I think there is a bug now when the input references a transaction in the same block\n  return chainWithUnconfirmed.reduce<UnspentTransactionOutput[]>((unspentTransactions, block) => {\n    // Gather all new outputs on this block\n    const newUnspentOutputs = block.data.reduce<UnspentTransactionOutput[]>((acc, transaction) => acc.concat(createUnspentTransactionOutputs(transaction)), []);\n    // Gather all inputs on this block, so we can use them to unvalidate older outputs\n    const allInputsOnThisBlock = block.data.reduce<TransactionInput[]>((acc, transaction) => acc.concat(transaction.inputs), []);\n    // Invalidate outputs based on these new inputs\n    const remainingUnspentTransactions: UnspentTransactionOutput[] = [...unspentTransactions, ...newUnspentOutputs].filter(unspentTransaction => {\n      // Remove unspenttransaction if the current block references it as an input\n      if (allInputsOnThisBlock.find(input => input.transactionId === unspentTransaction.transactionId && input.transactionOutputIndex === unspentTransaction.index)) {\n        return false;\n      }\n      return true;\n    });\n    return remainingUnspentTransactions\n  }, []);\n}\n\n/**\n * Get all unspent transactions of a single user\n */\nexport function unspentTransactionsOfAddress(chain: Chain<Transaction[]>, unconfirmedTransactions: Transaction[], address: string): UnspentTransactionOutput[] {\n  const allUnspentTransactions = calculateUnspentOutputs(chain, unconfirmedTransactions);\n  return allUnspentTransactions.filter(transaction => transaction.address === address);\n}\n\n/**\n * Get remaining coins of a single user\n */\nexport function balanceOfAddress(chain: Chain<Transaction[]>, unconfirmedTransactions: Transaction[], address: string): number {\n  const unspentTransactions = unspentTransactionsOfAddress(chain, unconfirmedTransactions, address);\n  return unspentTransactions.reduce((acc, transaction) => acc + transaction.amount, 0);\n}\n\n/**\n * Helper for creating an input from an unspent output\n */\nexport function createUnsignedInputFromUnspentOutput(output: UnspentTransactionOutput): TransactionInput {\n  return {\n    signature: '',\n    transactionId: output.transactionId,\n    transactionOutputIndex: output.index,\n  };\n}\n\n/**\n * Helper for creating a one way transaction output\n */\nexport function createOutputs(myPublicKey: string, receiverPublicKey: string, amount: number, leftoverAmount: number): TransactionOutput[] {\n  if (leftoverAmount > 0) {\n    return [{\n      address: receiverPublicKey,\n      amount\n    }, {\n      address: myPublicKey,\n      amount: leftoverAmount\n    }];\n  }\n\n  return [{\n    address: receiverPublicKey,\n    amount\n  }];\n}\n\n/**\n * Find the sender's address based on the inputs of the transaction\n */\nexport function getSenderAddress(transaction: Transaction, chain: Chain<Transaction[]>): string | null {\n  const sampleInput = transaction.inputs[0];\n  if (!sampleInput.transactionId) {\n    return null;\n  }\n  const outputTransactionBlock = chain.find(block => block.data.find(transaction => transaction.id === sampleInput.transactionId));\n  const outputTransaction = outputTransactionBlock?.data.find(transaction => transaction.id === sampleInput.transactionId);\n  const output = outputTransaction?.outputs[sampleInput.transactionOutputIndex];\n  return output?.address || null;\n}\n\n/**\n * Get all transactions an address was involved in\n */\nexport function getTransactionsOfAddress(chain: Chain<Transaction[]>, unconfirmedTransactions: Transaction[], address: string): Transaction[] {\n  const transactions = chain.reduce<Transaction[]>((acc, block) => acc.concat(block.data), []).concat(unconfirmedTransactions);\n  console.log(transactions);\n  return transactions.filter(transaction => {\n    return transaction.outputs.find(output => output.address === address) || getSenderAddress(transaction, chain) === address\n  });\n}","import { Card, CardContent, Divider, makeStyles, Typography } from '@material-ui/core';\nimport React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getSenderAddress, Transaction } from '../../../src/transaction';\nimport { DataContext } from './DataProvider';\n\ntype Props = {\n  transaction: Transaction;\n}\n\nconst useStyles = makeStyles({\n  hash: {\n    fontSize: 12\n  }\n});\n\nexport function shortAddress(hash: string): string {\n  return `${hash.substr(0, 8)}...${hash.substr(-8)}`;\n}\n\nexport default function TransactionComponent({ transaction }: Props) {\n  const classes = useStyles();\n  const { chain } = useContext(DataContext);\n\n  const sender = getSenderAddress(transaction, chain);\n\n  const senderDisplay = sender ? <Link to={`/wallet/${sender}`}>{shortAddress(sender)}</Link> : <strong>COINBASE</strong>\n\n  return (\n    <>\n      <Card>\n        <CardContent>\n          <Typography color=\"textSecondary\" className={classes.hash}>{transaction.id}</Typography>\n          <Typography>\n            {transaction.outputs.map((output, i) => (\n              <div key={i}>\n                {senderDisplay} &gt; <Link to={`/wallet/${output.address}`}>{shortAddress(output.address)}</Link> for <strong>{output.amount}</strong> coins\n              </div>\n            ))}\n          </Typography>\n          {transaction.message && (\n            <Typography>\n              Included message: \"{transaction.message}\"\n            </Typography>\n          )}\n        </CardContent>\n      </Card>\n      <Divider />\n    </>\n  )\n}","import { makeStyles, Card, CardContent, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\nimport React from 'react';\nimport { Block } from '../../../src/block';\nimport { Transaction } from '../../../src/transaction';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport TransactionComponent from './Transaction';\n\ntype Props = {\n  block: Block<Transaction[]>;\n  index: number;\n}\n\nconst useStyles = makeStyles({\n  hash: {\n    fontSize: 12\n  }\n});\n\nconst difficultyRegex = /^0+/;\n\nexport default function BlockComponent({ block, index }: Props) {\n  const classes = useStyles();\n  const difficulty = difficultyRegex.exec(block.hash);\n  return (\n    <Card>\n      <CardContent>\n        <Typography component=\"h2\" variant=\"h6\" color=\"textSecondary\" gutterBottom>\n          Block {index}\n        </Typography>\n        <Typography color=\"textSecondary\" className={classes.hash}>\n          {block.hash}\n        </Typography>\n        <Typography color=\"textSecondary\" className={classes.hash} gutterBottom>\n          Difficulty: {difficulty ? difficulty[0].length : 0}\n        </Typography>\n        <Typography color=\"textSecondary\" className={classes.hash} gutterBottom>\n          {new Date(block.timestamp).toLocaleString()}\n        </Typography>\n\n      </CardContent>\n        <Accordion>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <Typography color=\"textSecondary\">{block.data.length} transaction{block.data.length === 1 ? '' : 's'}</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n              <Grid container spacing={1}>\n                {block.data.map(transaction => (\n                  <Grid item xs={12}>\n                    <TransactionComponent key={transaction.id} transaction={transaction} />\n                  </Grid>\n                ))}\n              </Grid>\n          </AccordionDetails>\n        </Accordion>\n\n    </Card>\n  )\n}","import { Grid } from \"@material-ui/core\";\nimport React, { useContext, useMemo } from \"react\";\nimport BlockComponent from \"./Block\";\nimport { DataContext } from \"./DataProvider\";\n\nexport default function BlockList() {\n  const { chain } = useContext(DataContext);\n\n  const reversedChain = useMemo(() => [...chain].reverse(), [chain]);\n\n  return (\n    <Grid container spacing={2}>\n      {reversedChain.map((block, i) => (\n        <Grid item lg={6}>\n          <BlockComponent block={block} key={block.hash} index={reversedChain.length - i} />\n        </Grid>\n      ))}\n    </Grid>\n  )\n}","import { Grid, makeStyles, Paper, Table, TableBody, TableCell, TableHead, TableRow, Typography } from \"@material-ui/core\";\nimport React, { useContext, useMemo } from \"react\";\nimport { useParams } from \"react-router\";\nimport { balanceOfAddress, getSenderAddress, getTransactionsOfAddress } from \"../../../src/transaction\";\nimport { DataContext } from \"./DataProvider\";\nimport { shortAddress } from \"./Transaction\";\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    wordBreak: 'break-all'\n  }\n}));\n\n\n\nexport default function Wallet() {\n  const { address } = useParams<{ address: string }>();\n  const { chain } = useContext(DataContext);\n  const classes = useStyles();\n  const balance = chain.length > 0 ? balanceOfAddress(chain, [], address) : null;\n  const transactions = useMemo(() => {\n    return getTransactionsOfAddress(chain, [], address).reverse();\n  }, [address, chain]);\n\n  return (\n    <>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>Wallet {address}</Typography>\n            {balance !== null && <Typography component=\"h3\" variant=\"h6\" color=\"textSecondary\" gutterBottom>Balance: {balance}</Typography>}\n            <Table size=\"small\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Incoming / Outgoing</TableCell>\n                  <TableCell>Address</TableCell>\n                  <TableCell align=\"right\">Amount</TableCell>\n                  <TableCell>Message</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {transactions.map((transaction) => {\n                  const isCoinbase = transaction.inputs.length === 1 &&\n                    transaction.outputs.length === 1 &&\n                    Number.isInteger(transaction.inputs[0].transactionOutputIndex) &&\n                    transaction.inputs[0].transactionId === '';\n                  const isSendingToYourself = !isCoinbase && !transaction.outputs.map(o => o.address).find(a => a !== address);\n                  if (isSendingToYourself) {\n                    return null;\n                  }\n                  const senderAddress = getSenderAddress(transaction, chain);\n                  const isOutgoing = senderAddress === address;\n                  const relevantOutput = isOutgoing ?\n                    transaction.outputs.find(output => output.address !== address) :\n                    transaction.outputs.find(output => output.address === address);\n                  const otherAddress = isOutgoing ? relevantOutput?.address : senderAddress;\n                  const otherAddressDisplay = otherAddress ? <Link to={`/wallet/${otherAddress}`}>{shortAddress(otherAddress)}</Link> : (isCoinbase ? 'COINBASE' : '-');\n                  return (\n                    <TableRow key={transaction.id}>\n                      <TableCell>{isOutgoing ? 'Outgoing' : 'Incoming'}</TableCell>\n                      <TableCell>{otherAddressDisplay}</TableCell>\n                      <TableCell align=\"right\">{otherAddress ? relevantOutput?.amount : transaction.outputs[0].amount}</TableCell>\n                      <TableCell>{transaction.message}</TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </Paper>\n        </Grid>\n      </Grid>\n    </>\n  )\n}","import { Grid, makeStyles, Paper, TextField, Typography } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    wordBreak: 'break-all'\n  }\n}));\n\n\nexport default function MyWallet() {\n  const classes = useStyles();\n  const [publicKey, setPublicKey] = useState(localStorage.getItem('publicKey') || '');\n  const [secret, setSecret] = useState(localStorage.getItem('secret') || '');\n\n  useEffect(() => {\n    localStorage.setItem('publicKey', publicKey);\n    localStorage.setItem('secret', secret);\n  }, [publicKey, secret]);\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12}>\n        <Paper className={classes.paper}>\n          <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>My Wallet</Typography>\n          <Typography component=\"h3\" variant=\"h6\" color=\"textSecondary\" gutterBottom>Set your wallet details</Typography>\n          <TextField label=\"Public key\" variant=\"outlined\" value={publicKey} onChange={(event: React.ChangeEvent<HTMLInputElement>) => setPublicKey(event.target.value)} margin=\"normal\" />\n          <TextField label=\"Secret key\" variant=\"outlined\" value={secret} onChange={(event: React.ChangeEvent<HTMLInputElement>) => setSecret(event.target.value)} margin=\"normal\" />\n          {publicKey && <Link to={`/wallet/${publicKey}`}>Go to wallet</Link>}\n        </Paper>\n      </Grid>\n    </Grid>\n  )\n}","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/miner.worker.54009609.worker.js\");\n}\n","import { FormControl, Grid, makeStyles, MenuItem, Paper, Select, Typography } from \"@material-ui/core\";\nimport React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from \"react\";\nimport { post } from \"../utils/getJson\";\nimport { Block, createBlock, getDifficultyForNextBlock } from \"../../../src/block\";\nimport { createCoinbaseTransaction, dataSerializer, Transaction } from \"../../../src/transaction\";\nimport { DataContext } from \"./DataProvider\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport Miner from 'worker-loader!./miner.worker';\nimport { WorkerEvent } from \"./miner.worker\";\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    wordBreak: 'break-all'\n  },\n  text: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  select: {\n    marginLeft: '1em'\n  }\n}));\n\nexport default function BlockList() {\n  const { chain, unconfirmedTransactions } = useContext(DataContext);\n  const classes = useStyles();\n  const publicKey = localStorage.getItem('publicKey');\n  const secretKey = localStorage.getItem('secret');\n  const [hashCount, setHashCount] = useState(0);\n  const [block, setBlock] = useState<Block<Transaction[]> | null>(null);\n  const [solutions, setSolutions] = useState(0);\n  const [cores, setCores] = useState(1);\n  const workers = useRef<Worker[] | null>(null);\n  const progressInfo = useRef<Array<{ timestamp: number; count: number; }>>([]);\n\n  const data = useMemo(() => {\n    if (!unconfirmedTransactions || chain.length === 0 || !secretKey || !publicKey) {\n      return null;\n    }\n    const coinbaseTransaction = createCoinbaseTransaction(chain.length, publicKey, secretKey);\n    const unminedBlock = createBlock([coinbaseTransaction, ...unconfirmedTransactions], chain[chain.length - 1].hash, dataSerializer);\n    const difficulty = getDifficultyForNextBlock(chain);\n\n    return {\n      chain,\n      unconfirmedTransactions,\n      coinbaseTransaction,\n      unminedBlock,\n      difficulty\n    }\n  }, [chain, unconfirmedTransactions, publicKey, secretKey]);\n\n  /**\n   * Update internal values / get the mined block when events are sent from workers\n   */\n  const onWorkerEvent = useCallback((event: MessageEvent<WorkerEvent>) => {\n    const workerEvent = event.data;\n    if (workerEvent.type === 'count') {\n      setHashCount(count => count + workerEvent.count);\n    } else if (workerEvent.type === 'solution') {\n      console.log(workerEvent.block)\n      setBlock(workerEvent.block);\n    }\n  }, []);\n\n  /**\n   * Setup / reset miners when new data is available\n   */\n  useEffect(() => {\n    if (data?.unminedBlock && data?.difficulty && !block) {\n      const newWorkers = []\n      for (let i = 0; i < cores; i++) {\n        const miner = new Miner();\n        miner.postMessage({\n          unminedBlock: data.unminedBlock,\n          difficulty: data.difficulty\n        });\n        miner.onmessage = onWorkerEvent;\n        newWorkers.push(miner);\n      }\n      workers.current = newWorkers;\n    }\n    return () => {\n      if (workers.current) {\n        console.log('terminating all workers');\n        workers.current.forEach(worker => worker.terminate());\n      }\n    }\n  }, [data, onWorkerEvent, block, cores]);\n\n  /**\n   * Send a mined block when ready to the server and reset state\n   */\n  useEffect(() => {\n    if (block) {\n      post('/mine-block', block).then((res) => {\n        if (res === 'success') {\n          setSolutions(solutions => solutions + 1);\n        }\n        setHashCount(0);\n        setBlock(null);\n        progressInfo.current = []\n      })\n      .catch(err => {\n        console.log(err);\n        setHashCount(0);\n        setBlock(null);\n        progressInfo.current = []\n      });\n    }\n  }, [block]);\n\n  const handleCoresChange = useCallback((event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>) => {\n    setCores(event.target.value as number);\n  }, [])\n\n  /**\n   * Update the progressinfo array with the latest count, so we can calculate a rolling average of hashes / s\n   */\n  useEffect(() => {\n    progressInfo.current = [...progressInfo.current, { timestamp: Date.now(), count: hashCount }];\n    if (progressInfo.current.length > 200) {\n      progressInfo.current = progressInfo.current.slice(-200);\n    }\n  }, [hashCount]);\n\n  if (!unconfirmedTransactions) {\n    return <>Loading...</>\n  }\n\n  if (!secretKey || !publicKey) {\n    return <>Please specify your public and secret keys in your Wallet</>;\n  }\n\n  /**\n   * Calculate a rolling average of the hashrate\n   */\n  const hashRate = progressInfo.current.length >= 2 ?\n    (progressInfo.current[progressInfo.current.length - 1].count - progressInfo.current[0].count) / ((progressInfo.current[progressInfo.current.length - 1].timestamp - progressInfo.current[0].timestamp) / 1000) :\n    null;\n\n  return (\n    <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>Mine block</Typography>\n            <Typography component=\"h3\" variant=\"h6\" color=\"textSecondary\" gutterBottom>Block will include {unconfirmedTransactions.length} transactions</Typography>\n            {data?.difficulty && <Typography component=\"h3\" variant=\"h6\" color=\"textSecondary\" gutterBottom>Difficulty: {data.difficulty}</Typography>}\n            <Typography component=\"h3\" variant=\"h6\" color=\"textSecondary\" gutterBottom className={classes.text}>Number of cores used <FormControl variant=\"outlined\">\n              <Select\n                labelId=\"demo-simple-select-error-label\"\n                id=\"demo-simple-select-error\"\n                value={cores}\n                onChange={handleCoresChange}\n                className={classes.select}\n              >\n                {(new Array(navigator.hardwareConcurrency).fill(true).map((_, i) => i+1)).map(item => {\n                  return <MenuItem value={item} key={item}>{item}</MenuItem>\n                })}\n              </Select>\n            </FormControl></Typography>\n\n            {hashCount > 0 && <Typography component=\"h3\" variant=\"h6\" color=\"textSecondary\" gutterBottom>Mining in progress, tries: {hashCount}, hash rate: {hashRate && Math.floor(hashRate / 1000)} khashes/s</Typography>}\n            {solutions > 0 && <Typography component=\"h3\" variant=\"h6\" color=\"textSecondary\" gutterBottom>Solutions: {solutions}</Typography>}\n          </Paper>\n        </Grid>\n    </Grid>\n  )\n}","import { Button, Grid, makeStyles, Paper, TextField, Typography } from \"@material-ui/core\";\nimport React, { useCallback, useContext, useMemo, useState } from \"react\";\nimport { post } from \"../utils/getJson\";\nimport { createTransactionForAmount, signTransaction } from \"../../../src/transaction\";\nimport { DataContext } from \"./DataProvider\";\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    wordBreak: 'break-all'\n  }\n}));\n\n\nexport default function CreateTransaction() {\n  const classes = useStyles();\n  const { chain, unconfirmedTransactions } = useContext(DataContext);\n  const publicKey = localStorage.getItem('publicKey');\n  const secretKey = localStorage.getItem('secret');\n  const [data, setData] = useState({\n    recipient: '',\n    amount: 0\n  });\n\n  const handleRecipientChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    setData(data => ({\n      ...data,\n      recipient: event.target.value\n    }));\n  }, []);\n\n  const handleAmountChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    setData(data => ({\n      ...data,\n      amount: parseInt(event.target.value)\n    }));\n  }, []);\n\n  const transaction = useMemo(() => {\n    if (!unconfirmedTransactions || chain.length === 0 || !publicKey || !secretKey || !data.recipient || !data.amount) {\n      return null;\n    }\n    const unsignedTransaction = createTransactionForAmount(chain, unconfirmedTransactions, publicKey, data.recipient, '', data.amount);\n    return signTransaction(unsignedTransaction, secretKey);\n  }, [chain, data.amount, data.recipient, publicKey, secretKey, unconfirmedTransactions]);\n\n  const send = useCallback(() => {\n    post('/add-transaction', transaction).then((res) => {\n      if (res === 'success') {\n        setData({\n          recipient: '',\n          amount: 0\n        })\n      }\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }, [transaction])\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12}>\n        <Paper className={classes.paper}>\n          <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>Create Transaction</Typography>\n          <TextField label=\"Recipient address\" variant=\"outlined\" value={data.recipient} onChange={handleRecipientChange} margin=\"normal\" />\n          <TextField label=\"Amount\" variant=\"outlined\" value={data.amount} onChange={handleAmountChange} margin=\"normal\" />\n          <Button onClick={send} disabled={!transaction}>Send coins</Button>\n        </Paper>\n      </Grid>\n    </Grid>\n  )\n}","import React from 'react';\nimport DataProvider from './components/DataProvider';\nimport Layout from './components/Layout';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport BlockList from './components/BlockList';\nimport Wallet from './components/Wallet';\nimport MyWallet from './components/MyWallet';\nimport Mine from './components/Mine';\nimport CreateTransaction from './components/CreateTransaction';\n\nexport default function App() {\n\n  return (\n    <DataProvider>\n      <HashRouter>\n        <Layout>\n            <Switch>\n              <Route path=\"/chain-explorer\">\n                <BlockList />\n              </Route>\n              <Route path=\"/wallet\" exact>\n                <MyWallet />\n              </Route>\n              <Route path=\"/wallet/:address\">\n                <Wallet />\n              </Route>\n              <Route path=\"/create-transaction\">\n                <CreateTransaction />\n              </Route>\n              <Route path=\"/mine\">\n                <Mine />\n              </Route>\n            </Switch>\n        </Layout>\n      </HashRouter>\n    </DataProvider>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render((\n  <App />\n), document.getElementById('root'));\n"],"sourceRoot":""}